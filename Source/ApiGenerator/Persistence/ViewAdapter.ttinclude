<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="Common" #>
<#@ parameter type="System.String" name="Platform" #>
<#@ parameter type="System.String" name="DatabaseSchema" #>
<#@ parameter type="System.String" name="DatabaseTable" #>
<#@ parameter type="System.String" name="DomainEntity" #>
<#@ parameter type="System.String" name="DomainToolkit" #>
<#@ include file="$(ProjectDir)\Include.ttinclude" once="true" #><#
    
    var table = GetTable(DatabaseSchema, DatabaseTable);
    var columns = table.Columns;
    var primaryKey = table.PrimaryKey;

#>
using <#= Platform #>.Contract.<#= DomainToolkit #>;

namespace <#= Platform #>.Persistence.<#= DomainToolkit #>;

public class <#= DomainEntity #>Adapter
{
    public IEnumerable<<#= DomainEntity #>Model> ToListModel(IEnumerable<<#= DomainEntity #>Entity> entities)
    {
        return entities.Select(ToModel);
    }

    public <#= DomainEntity #>Model ToModel(<#= DomainEntity #>Entity entity)
    {
        var model = new <#= DomainEntity #>Model
        {
<#
for (int i = 0; i < columns.Count; i++) 
{        
    Write("            " + columns[i].ColumnName + " = entity." + columns[i].ColumnName);
    if (i < columns.Count - 1)
        WriteLine(",");
}
#>            
        };

        return model;
    }
}