
using Microsoft.EntityFrameworkCore;

using Shift.Domain.Accounts;
using Shift.Domain.Analytics;
using Shift.Domain.Assessments;
using Shift.Domain.Assets;
using Shift.Domain.Calendars;
using Shift.Domain.Catalogs;
using Shift.Domain.Communications;
using Shift.Domain.Contacts;
using Shift.Domain.Databases;
using Shift.Domain.Integrations;
using Shift.Domain.Jobs;
using Shift.Domain.Portals;
using Shift.Domain.Records;
using Shift.Domain.Sales;
using Shift.Domain.Settings;
using Shift.Domain.Standards;
using Shift.Domain.Surveys;
using Shift.Domain.Timelines;
using Shift.Domain.Variants;
using Shift.Domain.Workflows;

using Shift.Persistence.Accounts;
using Shift.Persistence.Analytics;
using Shift.Persistence.Assessments;
using Shift.Persistence.Assets;
using Shift.Persistence.Calendars;
using Shift.Persistence.Catalogs;
using Shift.Persistence.Communications;
using Shift.Persistence.Contacts;
using Shift.Persistence.Databases;
using Shift.Persistence.Integrations;
using Shift.Persistence.Jobs;
using Shift.Persistence.Portals;
using Shift.Persistence.Records;
using Shift.Persistence.Sales;
using Shift.Persistence.Settings;
using Shift.Persistence.Standards;
using Shift.Persistence.Surveys;
using Shift.Persistence.Timelines;
using Shift.Persistence.Variants;
using Shift.Persistence.Workflows;

namespace Shift.Persistence;

public class TableDbContext : DbContext
{
    public TableDbContext(DbContextOptions options) : base(options) { }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        ApplyConfigurations(builder);
        ApplyNavigations(builder);

        var decimalProperties = builder.Model
            .GetEntityTypes()
            .SelectMany(t => t.GetProperties())
            .Where(p => (Nullable.GetUnderlyingType(p.ClrType) ?? p.ClrType) == typeof(decimal));

        foreach (var property in decimalProperties)
        {
            property.SetPrecision(18);
            property.SetScale(2);
        }
    }

    private void ApplyNavigations(ModelBuilder builder)
    {
        // builder.Entity<UserEntity>().HasMany(e => e.Persons).WithOne(e => e.User).HasForeignKey(e => e.UserIdentifier).HasPrincipalKey(e => e.UserIdentifier);
    }

    private void ApplyConfigurations(ModelBuilder builder)
    {
            builder.ApplyConfiguration(new AchievementCategoryConfiguration());
            builder.ApplyConfiguration(new AchievementClassificationConfiguration());
            builder.ApplyConfiguration(new AchievementCompetencyConfiguration());
            builder.ApplyConfiguration(new AchievementConfiguration());
            builder.ApplyConfiguration(new AchievementGroupConfiguration());
            builder.ApplyConfiguration(new AchievementOrganizationConfiguration());
            builder.ApplyConfiguration(new ActionConfiguration());
            builder.ApplyConfiguration(new ActionFieldConfiguration());
            builder.ApplyConfiguration(new ActionFieldOrganizationConfiguration());
            builder.ApplyConfiguration(new ActivityCompetencyConfiguration());
            builder.ApplyConfiguration(new ActivityConfiguration());
            builder.ApplyConfiguration(new AddressConfiguration());
            builder.ApplyConfiguration(new AggregateBufferConfiguration());
            builder.ApplyConfiguration(new AggregateConfiguration());
            builder.ApplyConfiguration(new ApiTransactionConfiguration());
            builder.ApplyConfiguration(new ApplicationConfiguration());
            builder.ApplyConfiguration(new AttemptConfiguration());
            builder.ApplyConfiguration(new AttemptMatchConfiguration());
            builder.ApplyConfiguration(new AttemptOptionConfiguration());
            builder.ApplyConfiguration(new AttemptPinConfiguration());
            builder.ApplyConfiguration(new AttemptQuestionConfiguration());
            builder.ApplyConfiguration(new BankConfiguration());
            builder.ApplyConfiguration(new BankFormConfiguration());
            builder.ApplyConfiguration(new BankQuestionAttachmentConfiguration());
            builder.ApplyConfiguration(new BankQuestionCompetencyConfiguration());
            builder.ApplyConfiguration(new BankQuestionConfiguration());
            builder.ApplyConfiguration(new BankSpecificationConfiguration());
            builder.ApplyConfiguration(new BlockchainTransactionConfiguration());
            builder.ApplyConfiguration(new CandidateEducationConfiguration());
            builder.ApplyConfiguration(new CandidateExperienceConfiguration());
            builder.ApplyConfiguration(new CandidateExperienceItemConfiguration());
            builder.ApplyConfiguration(new CandidateFileConfiguration());
            builder.ApplyConfiguration(new CandidateLanguageProficiencyConfiguration());
            builder.ApplyConfiguration(new CategoryConfiguration());
            builder.ApplyConfiguration(new CertificateConfiguration());
            builder.ApplyConfiguration(new ChangeBufferConfiguration());
            builder.ApplyConfiguration(new ChangeConfiguration());
            builder.ApplyConfiguration(new CmdsInvoiceConfiguration());
            builder.ApplyConfiguration(new CmdsInvoiceFeeConfiguration());
            builder.ApplyConfiguration(new CmdsInvoiceItemConfiguration());
            builder.ApplyConfiguration(new CollegeCertificateConfiguration());
            builder.ApplyConfiguration(new CommandConfiguration());
            builder.ApplyConfiguration(new CommentConfiguration());
            builder.ApplyConfiguration(new CompetencyCategoryConfiguration());
            builder.ApplyConfiguration(new CompetencyConfiguration());
            builder.ApplyConfiguration(new CompetencyConnectionConfiguration());
            builder.ApplyConfiguration(new CompetencyContainmentConfiguration());
            builder.ApplyConfiguration(new CompetencyOrganizationConfiguration());
            builder.ApplyConfiguration(new ContentConfiguration());
            builder.ApplyConfiguration(new CounterConfiguration());
            builder.ApplyConfiguration(new CourseConfiguration());
            builder.ApplyConfiguration(new CourseEnrollmentConfiguration());
            builder.ApplyConfiguration(new CredentialConfiguration());
            builder.ApplyConfiguration(new CredentialLogConfiguration());
            builder.ApplyConfiguration(new CredentialSummaryConfiguration());
            builder.ApplyConfiguration(new DeveloperConfiguration());
            builder.ApplyConfiguration(new DiscountConfiguration());
            builder.ApplyConfiguration(new DistributionConfiguration());
            builder.ApplyConfiguration(new DocumentCompetencyConfiguration());
            builder.ApplyConfiguration(new DocumentConfiguration());
            builder.ApplyConfiguration(new DocumentConnectionConfiguration());
            builder.ApplyConfiguration(new EmailConfiguration());
            builder.ApplyConfiguration(new EmailRecipientConfiguration());
            builder.ApplyConfiguration(new EnrollmentHistoryConfiguration());
            builder.ApplyConfiguration(new EventAssessmentConfiguration());
            builder.ApplyConfiguration(new EventConfiguration());
            builder.ApplyConfiguration(new EventSeatConfiguration());
            builder.ApplyConfiguration(new EventTimerConfiguration());
            builder.ApplyConfiguration(new EventUserConfiguration());
            builder.ApplyConfiguration(new FieldConfiguration());
            builder.ApplyConfiguration(new FileActivityConfiguration());
            builder.ApplyConfiguration(new FileClaimConfiguration());
            builder.ApplyConfiguration(new FileConfiguration());
            builder.ApplyConfiguration(new FilterConfiguration());
            builder.ApplyConfiguration(new FolderCommentConfiguration());
            builder.ApplyConfiguration(new FolderConfiguration());
            builder.ApplyConfiguration(new GlossaryContentConfiguration());
            builder.ApplyConfiguration(new GlossaryTermConfiguration());
            builder.ApplyConfiguration(new GradebookConfiguration());
            builder.ApplyConfiguration(new GradebookEnrollmentConfiguration());
            builder.ApplyConfiguration(new GradeItemCompetencyConfiguration());
            builder.ApplyConfiguration(new GradeItemConfiguration());
            builder.ApplyConfiguration(new GroupAddressConfiguration());
            builder.ApplyConfiguration(new GroupCompetencyConfiguration());
            builder.ApplyConfiguration(new GroupConfiguration());
            builder.ApplyConfiguration(new GroupConnectionConfiguration());
            builder.ApplyConfiguration(new GroupSettingConfiguration());
            builder.ApplyConfiguration(new GroupSummaryConfiguration());
            builder.ApplyConfiguration(new GroupTagConfiguration());
            builder.ApplyConfiguration(new HolidayConfiguration());
            builder.ApplyConfiguration(new ImpersonationConfiguration());
            builder.ApplyConfiguration(new IndividualConfiguration());
            builder.ApplyConfiguration(new InteractionConfiguration());
            builder.ApplyConfiguration(new InvoiceConfiguration());
            builder.ApplyConfiguration(new InvoiceItemConfiguration());
            builder.ApplyConfiguration(new IssueAttachmentConfiguration());
            builder.ApplyConfiguration(new IssueConfiguration());
            builder.ApplyConfiguration(new IssueFileRequirementConfiguration());
            builder.ApplyConfiguration(new IssueGroupConfiguration());
            builder.ApplyConfiguration(new IssueStatusConfiguration());
            builder.ApplyConfiguration(new IssueUserConfiguration());
            builder.ApplyConfiguration(new JournalCompetencyConfiguration());
            builder.ApplyConfiguration(new JournalConfiguration());
            builder.ApplyConfiguration(new JournalExperienceConfiguration());
            builder.ApplyConfiguration(new LearnerAttemptCommentConfiguration());
            builder.ApplyConfiguration(new LearnerAttemptConfiguration());
            builder.ApplyConfiguration(new LearnerAttemptMatchConfiguration());
            builder.ApplyConfiguration(new LearnerAttemptOptionConfiguration());
            builder.ApplyConfiguration(new LearnerAttemptPinConfiguration());
            builder.ApplyConfiguration(new LearnerAttemptQuestionConfiguration());
            builder.ApplyConfiguration(new LearnerAttemptSummaryConfiguration());
            builder.ApplyConfiguration(new LearnerEmploymentConfiguration());
            builder.ApplyConfiguration(new LearnerExperienceConfiguration());
            builder.ApplyConfiguration(new LearnerMeasurementConfiguration());
            builder.ApplyConfiguration(new LearnerProfileConfiguration());
            builder.ApplyConfiguration(new LearnerProgramSummaryConfiguration());
            builder.ApplyConfiguration(new LearnerSnapshotConfiguration());
            builder.ApplyConfiguration(new LearnerSnapshotSummaryConfiguration());
            builder.ApplyConfiguration(new LearnerSummaryConfiguration());
            builder.ApplyConfiguration(new LogbookCompetencyConfiguration());
            builder.ApplyConfiguration(new LogbookConfiguration());
            builder.ApplyConfiguration(new LogbookFieldConfiguration());
            builder.ApplyConfiguration(new LogbookUserConfiguration());
            builder.ApplyConfiguration(new LogConfiguration());
            builder.ApplyConfiguration(new LookupItemConfiguration());
            builder.ApplyConfiguration(new LookupListConfiguration());
            builder.ApplyConfiguration(new LtiLinkConfiguration());
            builder.ApplyConfiguration(new MailoutClickConfiguration());
            builder.ApplyConfiguration(new MailoutConfiguration());
            builder.ApplyConfiguration(new MailoutDeliveryConfiguration());
            builder.ApplyConfiguration(new MappingConfiguration());
            builder.ApplyConfiguration(new MeasurementConfiguration());
            builder.ApplyConfiguration(new MembershipConfiguration());
            builder.ApplyConfiguration(new MessageConfiguration());
            builder.ApplyConfiguration(new MessageLinkConfiguration());
            builder.ApplyConfiguration(new ModuleConfiguration());
            builder.ApplyConfiguration(new OpportunityCategoryConfiguration());
            builder.ApplyConfiguration(new OpportunityConfiguration());
            builder.ApplyConfiguration(new OrganizationConfiguration());
            builder.ApplyConfiguration(new OrganizationSummaryConfiguration());
            builder.ApplyConfiguration(new PageConfiguration());
            builder.ApplyConfiguration(new PaymentConfiguration());
            builder.ApplyConfiguration(new PeriodConfiguration());
            builder.ApplyConfiguration(new PermissionConfiguration());
            builder.ApplyConfiguration(new PersonConfiguration());
            builder.ApplyConfiguration(new PersonFieldConfiguration());
            builder.ApplyConfiguration(new PrerequisiteAchievementConfiguration());
            builder.ApplyConfiguration(new PrerequisiteConfiguration());
            builder.ApplyConfiguration(new ProductConfiguration());
            builder.ApplyConfiguration(new ProfileGroupCompetencyConfiguration());
            builder.ApplyConfiguration(new ProfileGroupLearnerConfiguration());
            builder.ApplyConfiguration(new ProgramConfiguration());
            builder.ApplyConfiguration(new ProgramEnrollmentConfiguration());
            builder.ApplyConfiguration(new ProgressionConfiguration());
            builder.ApplyConfiguration(new ProgressionLogConfiguration());
            builder.ApplyConfiguration(new ProgressValidationConfiguration());
            builder.ApplyConfiguration(new RegistrationAccommodationConfiguration());
            builder.ApplyConfiguration(new RegistrationConfiguration());
            builder.ApplyConfiguration(new RegistrationInstructorConfiguration());
            builder.ApplyConfiguration(new RegistrationTimerConfiguration());
            builder.ApplyConfiguration(new ReportABConfiguration());
            builder.ApplyConfiguration(new ReportConfiguration());
            builder.ApplyConfiguration(new ReportHCConfiguration());
            builder.ApplyConfiguration(new ReportHIConfiguration());
            builder.ApplyConfiguration(new ReportMFConfiguration());
            builder.ApplyConfiguration(new ReportMRConfiguration());
            builder.ApplyConfiguration(new ReportPAConfiguration());
            builder.ApplyConfiguration(new RespondentConfiguration());
            builder.ApplyConfiguration(new RubricConfiguration());
            builder.ApplyConfiguration(new RubricConnectionConfiguration());
            builder.ApplyConfiguration(new RubricCriterionConfiguration());
            builder.ApplyConfiguration(new RubricRatingConfiguration());
            builder.ApplyConfiguration(new ScormPackageConfiguration());
            builder.ApplyConfiguration(new ScormRegistrationConfiguration());
            builder.ApplyConfiguration(new ScormStatementConfiguration());
            builder.ApplyConfiguration(new SenderConfiguration());
            builder.ApplyConfiguration(new SenderOrganizationConfiguration());
            builder.ApplyConfiguration(new SequenceConfiguration());
            builder.ApplyConfiguration(new SiteConfiguration());
            builder.ApplyConfiguration(new SnapshotConfiguration());
            builder.ApplyConfiguration(new SubmissionAnswerConfiguration());
            builder.ApplyConfiguration(new SubmissionConfiguration());
            builder.ApplyConfiguration(new SubmissionOptionConfiguration());
            builder.ApplyConfiguration(new SubscriberFollowerConfiguration());
            builder.ApplyConfiguration(new SubscriberGroupConfiguration());
            builder.ApplyConfiguration(new SubscriberUserConfiguration());
            builder.ApplyConfiguration(new SummaryConfiguration());
            builder.ApplyConfiguration(new SurveyConditionConfiguration());
            builder.ApplyConfiguration(new SurveyFormConfiguration());
            builder.ApplyConfiguration(new SurveyOptionItemConfiguration());
            builder.ApplyConfiguration(new SurveyOptionListConfiguration());
            builder.ApplyConfiguration(new SurveyQuestionConfiguration());
            builder.ApplyConfiguration(new TaskConfiguration());
            builder.ApplyConfiguration(new TaskEnrollmentConfiguration());
            builder.ApplyConfiguration(new TemplateConfiguration());
            builder.ApplyConfiguration(new TombstoneConfiguration());
            builder.ApplyConfiguration(new UnitConfiguration());
            builder.ApplyConfiguration(new UpgradeConfiguration());
            builder.ApplyConfiguration(new UploadConfiguration());
            builder.ApplyConfiguration(new UploadObjectConfiguration());
            builder.ApplyConfiguration(new UserConfiguration());
            builder.ApplyConfiguration(new UserConnectionConfiguration());
            builder.ApplyConfiguration(new UserLogConfiguration());
            builder.ApplyConfiguration(new UserMockConfiguration());
            builder.ApplyConfiguration(new UserSessionCacheConfiguration());
            builder.ApplyConfiguration(new UserSessionConfiguration());
            builder.ApplyConfiguration(new UserSettingConfiguration());
            builder.ApplyConfiguration(new UserTokenConfiguration());
            builder.ApplyConfiguration(new ValidationConfiguration());
            builder.ApplyConfiguration(new ValidationLogConfiguration());
            builder.ApplyConfiguration(new VideoRecordingConfiguration());
            builder.ApplyConfiguration(new VideoRecordingSessionConfiguration());
    }

    #region Database Tables

        internal DbSet<AchievementCategoryEntity> AchievementCategories { get; set; }
        internal DbSet<AchievementClassificationEntity> AchievementClassifications { get; set; }
        internal DbSet<AchievementCompetencyEntity> AchievementCompetencies { get; set; }
        internal DbSet<AchievementEntity> Achievements { get; set; }
        internal DbSet<AchievementGroupEntity> AchievementGroups { get; set; }
        internal DbSet<AchievementOrganizationEntity> AchievementOrganizations { get; set; }
        internal DbSet<ActionEntity> Actions { get; set; }
        internal DbSet<ActionFieldEntity> ActionFields { get; set; }
        internal DbSet<ActionFieldOrganizationEntity> ActionFieldOrganizations { get; set; }
        internal DbSet<ActivityCompetencyEntity> ActivityCompetencies { get; set; }
        internal DbSet<ActivityEntity> Activities { get; set; }
        internal DbSet<AddressEntity> Addresses { get; set; }
        internal DbSet<AggregateBufferEntity> AggregateBuffers { get; set; }
        internal DbSet<AggregateEntity> Aggregates { get; set; }
        internal DbSet<ApiTransactionEntity> ApiTransactions { get; set; }
        internal DbSet<ApplicationEntity> Applications { get; set; }
        internal DbSet<AttemptEntity> Attempts { get; set; }
        internal DbSet<AttemptMatchEntity> AttemptMatches { get; set; }
        internal DbSet<AttemptOptionEntity> AttemptOptions { get; set; }
        internal DbSet<AttemptPinEntity> AttemptPins { get; set; }
        internal DbSet<AttemptQuestionEntity> AttemptQuestions { get; set; }
        internal DbSet<BankEntity> Banks { get; set; }
        internal DbSet<BankFormEntity> BankForms { get; set; }
        internal DbSet<BankQuestionAttachmentEntity> BankQuestionAttachments { get; set; }
        internal DbSet<BankQuestionCompetencyEntity> BankQuestionCompetencies { get; set; }
        internal DbSet<BankQuestionEntity> BankQuestions { get; set; }
        internal DbSet<BankSpecificationEntity> BankSpecifications { get; set; }
        internal DbSet<BlockchainTransactionEntity> BlockchainTransactions { get; set; }
        internal DbSet<CandidateEducationEntity> CandidateEducations { get; set; }
        internal DbSet<CandidateExperienceEntity> CandidateExperiences { get; set; }
        internal DbSet<CandidateExperienceItemEntity> CandidateExperienceItems { get; set; }
        internal DbSet<CandidateFileEntity> CandidateFiles { get; set; }
        internal DbSet<CandidateLanguageProficiencyEntity> CandidateLanguageProficiencies { get; set; }
        internal DbSet<CategoryEntity> Categories { get; set; }
        internal DbSet<CertificateEntity> Certificates { get; set; }
        internal DbSet<ChangeBufferEntity> ChangeBuffers { get; set; }
        internal DbSet<ChangeEntity> Changes { get; set; }
        internal DbSet<CmdsInvoiceEntity> CmdsInvoices { get; set; }
        internal DbSet<CmdsInvoiceFeeEntity> CmdsInvoiceFees { get; set; }
        internal DbSet<CmdsInvoiceItemEntity> CmdsInvoiceItems { get; set; }
        internal DbSet<CollegeCertificateEntity> CollegeCertificates { get; set; }
        internal DbSet<CommandEntity> Commands { get; set; }
        internal DbSet<CommentEntity> Comments { get; set; }
        internal DbSet<CompetencyCategoryEntity> CompetencyCategories { get; set; }
        internal DbSet<CompetencyConnectionEntity> CompetencyConnections { get; set; }
        internal DbSet<CompetencyContainmentEntity> CompetencyContainments { get; set; }
        internal DbSet<CompetencyEntity> Competencies { get; set; }
        internal DbSet<CompetencyOrganizationEntity> CompetencyOrganizations { get; set; }
        internal DbSet<ContentEntity> Contents { get; set; }
        internal DbSet<CounterEntity> Counters { get; set; }
        internal DbSet<CourseEnrollmentEntity> CourseEnrollments { get; set; }
        internal DbSet<CourseEntity> Courses { get; set; }
        internal DbSet<CredentialEntity> Credentials { get; set; }
        internal DbSet<CredentialLogEntity> CredentialLogs { get; set; }
        internal DbSet<CredentialSummaryEntity> CredentialSummaries { get; set; }
        internal DbSet<DeveloperEntity> Developers { get; set; }
        internal DbSet<DiscountEntity> Discounts { get; set; }
        internal DbSet<DistributionEntity> Distributions { get; set; }
        internal DbSet<DocumentCompetencyEntity> DocumentCompetencies { get; set; }
        internal DbSet<DocumentConnectionEntity> DocumentConnections { get; set; }
        internal DbSet<DocumentEntity> Documents { get; set; }
        internal DbSet<EmailEntity> Emails { get; set; }
        internal DbSet<EmailRecipientEntity> EmailRecipients { get; set; }
        internal DbSet<EnrollmentHistoryEntity> EnrollmentHistories { get; set; }
        internal DbSet<EventAssessmentEntity> EventAssessments { get; set; }
        internal DbSet<EventEntity> Events { get; set; }
        internal DbSet<EventSeatEntity> EventSeats { get; set; }
        internal DbSet<EventTimerEntity> EventTimers { get; set; }
        internal DbSet<EventUserEntity> EventUsers { get; set; }
        internal DbSet<FieldEntity> Fields { get; set; }
        internal DbSet<FileActivityEntity> FileActivities { get; set; }
        internal DbSet<FileClaimEntity> FileClaims { get; set; }
        internal DbSet<FileEntity> Files { get; set; }
        internal DbSet<FilterEntity> Filters { get; set; }
        internal DbSet<FolderCommentEntity> FolderComments { get; set; }
        internal DbSet<FolderEntity> Folders { get; set; }
        internal DbSet<GlossaryContentEntity> GlossaryContents { get; set; }
        internal DbSet<GlossaryTermEntity> GlossaryTerms { get; set; }
        internal DbSet<GradebookEnrollmentEntity> GradebookEnrollments { get; set; }
        internal DbSet<GradebookEntity> Gradebooks { get; set; }
        internal DbSet<GradeItemCompetencyEntity> GradeItemCompetencies { get; set; }
        internal DbSet<GradeItemEntity> GradeItems { get; set; }
        internal DbSet<GroupAddressEntity> GroupAddresses { get; set; }
        internal DbSet<GroupCompetencyEntity> GroupCompetencies { get; set; }
        internal DbSet<GroupConnectionEntity> GroupConnections { get; set; }
        internal DbSet<GroupEntity> Groups { get; set; }
        internal DbSet<GroupSettingEntity> GroupSettings { get; set; }
        internal DbSet<GroupSummaryEntity> GroupSummaries { get; set; }
        internal DbSet<GroupTagEntity> GroupTags { get; set; }
        internal DbSet<HolidayEntity> Holidays { get; set; }
        internal DbSet<ImpersonationEntity> Impersonations { get; set; }
        internal DbSet<IndividualEntity> Individuals { get; set; }
        internal DbSet<InteractionEntity> Interactions { get; set; }
        internal DbSet<InvoiceEntity> Invoices { get; set; }
        internal DbSet<InvoiceItemEntity> InvoiceItems { get; set; }
        internal DbSet<IssueAttachmentEntity> IssueAttachments { get; set; }
        internal DbSet<IssueEntity> Issues { get; set; }
        internal DbSet<IssueFileRequirementEntity> IssueFileRequirements { get; set; }
        internal DbSet<IssueGroupEntity> IssueGroups { get; set; }
        internal DbSet<IssueStatusEntity> IssueStatuses { get; set; }
        internal DbSet<IssueUserEntity> IssueUsers { get; set; }
        internal DbSet<JournalCompetencyEntity> JournalCompetencies { get; set; }
        internal DbSet<JournalEntity> Journals { get; set; }
        internal DbSet<JournalExperienceEntity> JournalExperiences { get; set; }
        internal DbSet<LearnerAttemptCommentEntity> LearnerAttemptComments { get; set; }
        internal DbSet<LearnerAttemptEntity> LearnerAttempts { get; set; }
        internal DbSet<LearnerAttemptMatchEntity> LearnerAttemptMatches { get; set; }
        internal DbSet<LearnerAttemptOptionEntity> LearnerAttemptOptions { get; set; }
        internal DbSet<LearnerAttemptPinEntity> LearnerAttemptPins { get; set; }
        internal DbSet<LearnerAttemptQuestionEntity> LearnerAttemptQuestions { get; set; }
        internal DbSet<LearnerAttemptSummaryEntity> LearnerAttemptSummaries { get; set; }
        internal DbSet<LearnerEmploymentEntity> LearnerEmployments { get; set; }
        internal DbSet<LearnerExperienceEntity> LearnerExperiences { get; set; }
        internal DbSet<LearnerMeasurementEntity> LearnerMeasurements { get; set; }
        internal DbSet<LearnerProfileEntity> LearnerProfiles { get; set; }
        internal DbSet<LearnerProgramSummaryEntity> LearnerProgramSummaries { get; set; }
        internal DbSet<LearnerSnapshotEntity> LearnerSnapshots { get; set; }
        internal DbSet<LearnerSnapshotSummaryEntity> LearnerSnapshotSummaries { get; set; }
        internal DbSet<LearnerSummaryEntity> LearnerSummaries { get; set; }
        internal DbSet<LogbookCompetencyEntity> LogbookCompetencies { get; set; }
        internal DbSet<LogbookEntity> Logbooks { get; set; }
        internal DbSet<LogbookFieldEntity> LogbookFields { get; set; }
        internal DbSet<LogbookUserEntity> LogbookUsers { get; set; }
        internal DbSet<LogEntity> Logs { get; set; }
        internal DbSet<LookupItemEntity> LookupItems { get; set; }
        internal DbSet<LookupListEntity> LookupLists { get; set; }
        internal DbSet<LtiLinkEntity> LtiLinks { get; set; }
        internal DbSet<MailoutClickEntity> MailoutClicks { get; set; }
        internal DbSet<MailoutDeliveryEntity> MailoutDeliveries { get; set; }
        internal DbSet<MailoutEntity> Mailouts { get; set; }
        internal DbSet<MappingEntity> Mappings { get; set; }
        internal DbSet<MeasurementEntity> Measurements { get; set; }
        internal DbSet<MembershipEntity> Memberships { get; set; }
        internal DbSet<MessageEntity> Messages { get; set; }
        internal DbSet<MessageLinkEntity> MessageLinks { get; set; }
        internal DbSet<ModuleEntity> Modules { get; set; }
        internal DbSet<OpportunityCategoryEntity> OpportunityCategories { get; set; }
        internal DbSet<OpportunityEntity> Opportunities { get; set; }
        internal DbSet<OrganizationEntity> Organizations { get; set; }
        internal DbSet<OrganizationSummaryEntity> OrganizationSummaries { get; set; }
        internal DbSet<PageEntity> Pages { get; set; }
        internal DbSet<PaymentEntity> Payments { get; set; }
        internal DbSet<PeriodEntity> Periods { get; set; }
        internal DbSet<PermissionEntity> Permissions { get; set; }
        internal DbSet<PersonEntity> Persons { get; set; }
        internal DbSet<PersonFieldEntity> PersonFields { get; set; }
        internal DbSet<PrerequisiteAchievementEntity> PrerequisiteAchievements { get; set; }
        internal DbSet<PrerequisiteEntity> Prerequisites { get; set; }
        internal DbSet<ProductEntity> Products { get; set; }
        internal DbSet<ProfileGroupCompetencyEntity> ProfileGroupCompetencies { get; set; }
        internal DbSet<ProfileGroupLearnerEntity> ProfileGroupLearners { get; set; }
        internal DbSet<ProgramEnrollmentEntity> ProgramEnrollments { get; set; }
        internal DbSet<ProgramEntity> Programs { get; set; }
        internal DbSet<ProgressionEntity> Progressions { get; set; }
        internal DbSet<ProgressionLogEntity> ProgressionLogs { get; set; }
        internal DbSet<ProgressValidationEntity> ProgressValidations { get; set; }
        internal DbSet<RegistrationAccommodationEntity> RegistrationAccommodations { get; set; }
        internal DbSet<RegistrationEntity> Registrations { get; set; }
        internal DbSet<RegistrationInstructorEntity> RegistrationInstructors { get; set; }
        internal DbSet<RegistrationTimerEntity> RegistrationTimers { get; set; }
        internal DbSet<ReportABEntity> ReportABs { get; set; }
        internal DbSet<ReportEntity> Reports { get; set; }
        internal DbSet<ReportHCEntity> ReportHCs { get; set; }
        internal DbSet<ReportHIEntity> ReportHIs { get; set; }
        internal DbSet<ReportMFEntity> ReportMFs { get; set; }
        internal DbSet<ReportMREntity> ReportMRs { get; set; }
        internal DbSet<ReportPAEntity> ReportPAs { get; set; }
        internal DbSet<RespondentEntity> Respondents { get; set; }
        internal DbSet<RubricConnectionEntity> RubricConnections { get; set; }
        internal DbSet<RubricCriterionEntity> RubricCriterions { get; set; }
        internal DbSet<RubricEntity> Rubrics { get; set; }
        internal DbSet<RubricRatingEntity> RubricRatings { get; set; }
        internal DbSet<ScormPackageEntity> ScormPackages { get; set; }
        internal DbSet<ScormRegistrationEntity> ScormRegistrations { get; set; }
        internal DbSet<ScormStatementEntity> ScormStatements { get; set; }
        internal DbSet<SenderEntity> Senders { get; set; }
        internal DbSet<SenderOrganizationEntity> SenderOrganizations { get; set; }
        internal DbSet<SequenceEntity> Sequences { get; set; }
        internal DbSet<SiteEntity> Sites { get; set; }
        internal DbSet<SnapshotEntity> Snapshots { get; set; }
        internal DbSet<SubmissionAnswerEntity> SubmissionAnswers { get; set; }
        internal DbSet<SubmissionEntity> Submissions { get; set; }
        internal DbSet<SubmissionOptionEntity> SubmissionOptions { get; set; }
        internal DbSet<SubscriberFollowerEntity> SubscriberFollowers { get; set; }
        internal DbSet<SubscriberGroupEntity> SubscriberGroups { get; set; }
        internal DbSet<SubscriberUserEntity> SubscriberUsers { get; set; }
        internal DbSet<SummaryEntity> Summaries { get; set; }
        internal DbSet<SurveyConditionEntity> SurveyConditions { get; set; }
        internal DbSet<SurveyFormEntity> SurveyForms { get; set; }
        internal DbSet<SurveyOptionItemEntity> SurveyOptionItems { get; set; }
        internal DbSet<SurveyOptionListEntity> SurveyOptionLists { get; set; }
        internal DbSet<SurveyQuestionEntity> SurveyQuestions { get; set; }
        internal DbSet<TaskEnrollmentEntity> TaskEnrollments { get; set; }
        internal DbSet<TaskEntity> Tasks { get; set; }
        internal DbSet<TemplateEntity> Templates { get; set; }
        internal DbSet<TombstoneEntity> Tombstones { get; set; }
        internal DbSet<UnitEntity> Units { get; set; }
        internal DbSet<UpgradeEntity> Upgrades { get; set; }
        internal DbSet<UploadEntity> Uploads { get; set; }
        internal DbSet<UploadObjectEntity> UploadObjects { get; set; }
        internal DbSet<UserConnectionEntity> UserConnections { get; set; }
        internal DbSet<UserEntity> Users { get; set; }
        internal DbSet<UserLogEntity> UserLogs { get; set; }
        internal DbSet<UserMockEntity> UserMocks { get; set; }
        internal DbSet<UserSessionCacheEntity> UserSessionCaches { get; set; }
        internal DbSet<UserSessionEntity> UserSessions { get; set; }
        internal DbSet<UserSettingEntity> UserSettings { get; set; }
        internal DbSet<UserTokenEntity> UserTokens { get; set; }
        internal DbSet<ValidationEntity> Validations { get; set; }
        internal DbSet<ValidationLogEntity> ValidationLogs { get; set; }
        internal DbSet<VideoRecordingEntity> VideoRecordings { get; set; }
        internal DbSet<VideoRecordingSessionEntity> VideoRecordingSessions { get; set; }

    #endregion
}