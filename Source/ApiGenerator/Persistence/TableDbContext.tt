<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ parameter type="System.String" name="Platform" #>
<#@ include file="$(ProjectDir)\Include.ttinclude" once="true" #>
using Microsoft.EntityFrameworkCore;

<#
var toolkits = GetEndpoints().Select(x => x.DomainToolkit).Distinct().OrderBy(x => x);

foreach (var toolkit in toolkits)
    WriteLine($"using {Platform}.Domain.{toolkit};");

WriteLine("");

foreach (var toolkit in toolkits)
    WriteLine($"using {Platform}.Persistence.{toolkit};");
#>

namespace Shift.Persistence;

public class TableDbContext : DbContext
{
    public TableDbContext(DbContextOptions options) : base(options) { }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        ApplyConfigurations(builder);
        ApplyNavigations(builder);

        var decimalProperties = builder.Model
            .GetEntityTypes()
            .SelectMany(t => t.GetProperties())
            .Where(p => (Nullable.GetUnderlyingType(p.ClrType) ?? p.ClrType) == typeof(decimal));

        foreach (var property in decimalProperties)
        {
            property.SetPrecision(18);
            property.SetScale(2);
        }
    }

    private void ApplyNavigations(ModelBuilder builder)
    {
        // builder.Entity<UserEntity>().HasMany(e => e.Persons).WithOne(e => e.User).HasForeignKey(e => e.UserIdentifier).HasPrincipalKey(e => e.UserIdentifier);
    }

    private void ApplyConfigurations(ModelBuilder builder)
    {
<#
var endpoints = GetEndpoints();
var lines = new List<string>();
foreach (var endpoint in endpoints)
{
    var DomainEntityPlural = PluralizeNoun(endpoint.DomainEntity);
    lines.Add("            builder.ApplyConfiguration(new " + endpoint.DomainEntity + "Configuration());");
}
lines.Sort();
foreach (var line in lines)
    WriteLine(line);
#>
    }

    #region Database Tables

<#
lines = new List<string>();
foreach (var endpoint in endpoints)
{
    var DomainEntityPlural = PluralizeNoun(endpoint.DomainEntity);
    lines.Add("        internal DbSet<" + endpoint.DomainEntity + "Entity> " + DomainEntityPlural + " { get; set; }");
}
lines.Sort();
foreach (var line in lines)
    WriteLine(line);
#>

    #endregion
}