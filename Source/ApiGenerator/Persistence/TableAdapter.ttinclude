<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="Common" #>
<#@ parameter type="System.String" name="Platform" #>
<#@ parameter type="System.String" name="DatabaseSchema" #>
<#@ parameter type="System.String" name="DatabaseTable" #>
<#@ parameter type="System.String" name="DomainEntity" #>
<#@ parameter type="System.String" name="DomainToolkit" #>
<#@ include file="$(ProjectDir)\Include.ttinclude" once="true" #><#
    
    var table = GetTable(DatabaseSchema, DatabaseTable);
    var columns = table.Columns;
    var primaryKey = table.PrimaryKey;

#>
using <#= Platform #>.Contract.<#= DomainToolkit #>;

<# if (DomainEntity == "Module") { #>
using ModuleHandle = Shift.Contract.Curriculums.ModuleHandle;

<# } #>
namespace <#= Platform #>.Persistence.<#= DomainToolkit #>;

public class <#= DomainEntity #>Adapter
{
    public void Copy(Modify<#= DomainEntity #> modify, <#= DomainEntity #>Entity entity)
    {
<#
for (int i = 0; i < columns.Count; i++) 
{
    var column = columns[i];
    if (primaryKey.Contains(column))
        continue;

    WriteLine("        entity." + column.ColumnName + " = modify." + column.ColumnName + ";");
}
#>    }

    public <#= DomainEntity #>Entity ToEntity(Create<#= DomainEntity #> create)
    {
        var entity = new <#= DomainEntity #>Entity
        {
<#
for (int i = 0; i < columns.Count; i++) 
{
    var column = columns[i];
    Write("            " + column.ColumnName + " = create." + column.ColumnName);
    if (i < columns.Count - 1)
        WriteLine(",");
}
#>

        };
        return entity;
    }

    public IEnumerable<<#= DomainEntity #>Model> ToModel(IEnumerable<<#= DomainEntity #>Entity> entities)
    {
        return entities.Select(ToModel);
    }

    public <#= DomainEntity #>Model ToModel(<#= DomainEntity #>Entity entity)
    {
        var model = new <#= DomainEntity #>Model
        {
<#
for (int i = 0; i < columns.Count; i++) 
{  
    var column = columns[i];
    Write("            " + column.ColumnName + " = entity." + column.ColumnName);
    if (i < columns.Count - 1)
        WriteLine(",");
}
#>            
        };

        return model;
    }

    public IEnumerable<<#= DomainEntity #>Handle> ToHandle(IEnumerable<<#= DomainEntity #>Entity> entities)
    {
        return entities.Select(ToHandle);
    }

    public <#= DomainEntity #>Handle ToHandle(<#= DomainEntity #>Entity entity)
    {
        var handle = new <#= DomainEntity #>Handle
        {
<#
for (int i = 0; i < primaryKey.Length; i++) 
{        
    Write("            " + primaryKey[i].ColumnName + " = entity." + primaryKey[i].ColumnName);
    if (i < primaryKey.Length - 1)
        Write(",");
    WriteLine("");
}
#>
        };

        return handle;
    }
}