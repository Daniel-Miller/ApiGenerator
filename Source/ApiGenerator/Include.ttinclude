<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Memory" #>
<#@ assembly name="System.Text.Json" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.Json" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.Specialized" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#+

private string SettingsFilePath = @".\ApiGenerator\Settings.json";

public class TemplateSettings
{
    public string CommonName { get; set; }
    public string DatabaseName { get; set; }
    public string EndpointTable { get; set; }
    public string OutputDirectory { get; set; }
    public string PlatformName { get; set; }
}

public TemplateSettings GetSettings()
{
    var json = System.IO.File.ReadAllText(SettingsFilePath);
    
    return System.Text.Json.JsonSerializer.Deserialize<TemplateSettings>(json);
}

public System.Data.SqlClient.SqlConnection OpenDatabaseConnection()
{
    var settings = GetSettings();
    var connectionString = $"Data Source=(local);Initial Catalog={settings.DatabaseName};Integrated Security=True;";
    var connection = new System.Data.SqlClient.SqlConnection(connectionString);
    connection.Open();
    return connection;
}

public class ApiEndpoint
{
    public string DatabaseSchema { get; set; }
    public string DatabaseTable { get; set; }
    public string DatabasePrimaryKey { get; set; }
    public int DatabasePrimaryKeySize { get; set; }

    public string DomainToolkit { get; set; }
    public string DomainToolset { get; set; }
    public string DomainEntity { get; set; }

    public string EndpointBase { get; set; }
    public string EndpointCollection { get; set; }
    public string EndpointItem { get; set; }
}

public List<ApiEndpoint> GetEndpoints()
{
    var settings = GetSettings();

    using (var connection = OpenDatabaseConnection())
    {
        var select = $"SELECT * FROM {settings.EndpointTable} ORDER BY DomainToolkit, DomainToolset, DomainEntity";
        
        System.Diagnostics.Debug.WriteLine(select);

        var table = new DataTable();
        using (var da = new System.Data.SqlClient.SqlDataAdapter(select, connection))
        {
            da.Fill(table);
        }

        var list = new List<ApiEndpoint>();
        foreach (DataRow row in table.Rows)
        {
            var endpoint = new ApiEndpoint();

            endpoint.DatabaseSchema = (string)row["DatabaseSchema"];
            endpoint.DatabaseTable = (string)row["DatabaseTable"];   
            endpoint.DatabasePrimaryKey = (string)row["DatabasePrimaryKey"];
            endpoint.DatabasePrimaryKeySize = (int)row["DatabasePrimaryKeySize"];

            endpoint.DomainToolkit = (string)row["DomainToolkit"];
            endpoint.DomainToolset = (string)row["DomainToolset"];
            endpoint.DomainEntity = (string)row["DomainEntity"];

            endpoint.EndpointBase = (string)row["EndpointBase"];
            endpoint.EndpointCollection = (string)row["EndpointCollection"];
            endpoint.EndpointItem = (string)row["EndpointItem"];

            list.Add(endpoint);
        }
        return list;
    }
}

public DataTable GetTable(string schemaName, string tableName)
{
    using (var connection = OpenDatabaseConnection())
    {
        var table = new DataTable(tableName);
        using (var da = new System.Data.SqlClient.SqlDataAdapter($"SELECT * FROM {schemaName}.[{tableName}] WHERE 1=0", connection))
        {
            da.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            da.Fill(table);
        }

        return table;
    }
}

public object GetScalar(string select)
{
    using (var connection = OpenDatabaseConnection())
    {
        var command = new System.Data.SqlClient.SqlCommand(select, connection);
        return command.ExecuteScalar();
    }
}

public string GetNativeType(string table, string column)
{
    return (string)GetScalar($"select DATA_TYPE from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = '{table}' and COLUMN_NAME = '{column}'");
}

public int? GetColumnPrecision(string table, string column)
{
    return (int?)GetScalar($"select cast(NUMERIC_PRECISION as int) from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = '{table}' and COLUMN_NAME = '{column}'");
}

public int? GetColumnScale(string table, string column)
{
    return (int?)GetScalar($"select NUMERIC_SCALE from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = '{table}' and COLUMN_NAME = '{column}'");
}

public bool IsTable(string schemaName, string tableName)
{
    var query = $"select TABLE_TYPE from INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA = '{schemaName}' and TABLE_NAME = '{tableName}'";
    return GetScalar(query).ToString() == "BASE TABLE";
}

public class EntityColumnComparer : IComparer<DataColumn>
{
    public int Compare(DataColumn a, DataColumn b)
    {
        var aType = TypeNameOrAlias(a.DataType);
        var bType = TypeNameOrAlias(b.DataType);
        
        if (aType == bType)
            return a.ColumnName.CompareTo(b.ColumnName);
        
        var atype = DataTypeIndex(a.DataType.Name);
        var btype = DataTypeIndex(b.DataType.Name);
        
        if (atype < btype) 
            return -1;

        return 1;
    }
    
    private int DataTypeIndex(string name)
    {
        if (name == "Guid") return 0;
        if (name == "String") return 1;
        if (name == "Boolean") return 2;
        if (name == "Int32") return 3;
        if (name == "Decimal") return 4;
        if (name.StartsWith("DateTimeOffset")) return 5;
        if (name.StartsWith("DateTime")) return 6;
        return 7;
    }
}

public class ConfigurationColumnComparer : IComparer<DataColumn>
{
    public int Compare(DataColumn a, DataColumn b)
    {
        return a.ColumnName.CompareTo(b.ColumnName);
    }
}

// This is the set of types from the C# keyword list.
public static Dictionary<Type, string> _aliases = new Dictionary<Type, string>
{
    { typeof(bool), "bool" },
    { typeof(byte), "byte" },
    { typeof(byte[]), "byte[]" },
    { typeof(char), "char" },
    { typeof(DateTime), "DateTime" },
    { typeof(DateTimeOffset), "DateTimeOffset" },
    { typeof(decimal), "decimal" },
    { typeof(double), "double" },
    { typeof(float), "float" },
    { typeof(Guid), "Guid" },
    { typeof(int), "int" },
    { typeof(long), "long" },
    { typeof(object), "object" },
    { typeof(sbyte), "sbyte" },
    { typeof(short), "short" },
    { typeof(string), "string" },
    { typeof(uint), "uint" },
    { typeof(ulong), "ulong" },
};

public static string TypeNameOrAlias(Type type)
{
    if (!_aliases.ContainsKey(type))
        throw new Exception("Unexpected Type: " + type.FullName);
    return _aliases[type];
}

public string ConvertFirstLetterToUppercase(string input) 
{
    return string.Concat(input[0].ToString().ToUpper(), input.Substring(1));
}

public static string ConvertFirstLetterToLowercase(string input)
{
    if (string.IsNullOrEmpty(input))
    {
        return input;
    }

    char[] charArray = input.ToCharArray();
    charArray[0] = char.ToLower(charArray[0]);
    return new string(charArray);
}

public static string PluralizeNoun(string singularNoun)
{
    if (string.IsNullOrEmpty(singularNoun))
    {
        return singularNoun;
    }

    // Define some basic rules for pluralization
    if (singularNoun.EndsWith("y") && !singularNoun.EndsWith("ay"))
    {
        // Replace "y" with "ies" for words ending in "y"
        return singularNoun.Substring(0, singularNoun.Length - 1) + "ies";
    }
    else if (singularNoun.EndsWith("s") || singularNoun.EndsWith("x") || singularNoun.EndsWith("z") || singularNoun.EndsWith("sh") || singularNoun.EndsWith("ch"))
    {
        // Add "es" for words ending in "s," "x," "z," "sh," or "ch"
        return singularNoun + "es";
    }
    else
    {
        // Add "s" for all other cases
        return singularNoun + "s";
    }
}

#>