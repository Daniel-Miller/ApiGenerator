<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="DomainToolkit" #>
<#@ parameter type="System.String" name="DomainEntity" #>
<#@ assembly name="$(SolutionDir)\..\Build\ApiGenerator.Utility.dll" #>
<#@ import namespace="ApiGenerator.Utility" #><#
    
    var platform = Settings.PlatformName;
    var database = new Database();
    var endpoints = database.GetEndpoints();
    var endpoint = endpoints.GetEndpoint(DomainToolkit, DomainEntity);
    var entities = Inflector.PluralizeNoun(DomainEntity);

    var generator = new Generator(endpoint, true);
    var parameters = generator.PrimaryKeyMethodParameters();
    var arguments = generator.PrimaryKeyMethodArguments();
    var expression = generator.PrimaryKeyEqualityExpression();
    var values = generator.PrimaryKeyPropertyValues();
    var pkValuesForCreate = generator.PrimaryKeyPropertyValuesForCreate();
    var pkValuesForGet = generator.PrimaryKeyPropertyValuesForGet();
    var pkValuesForModify = generator.PrimaryKeyPropertyValuesForModify();

    var apiGroup = generator.ApiGroup();
    var apiSpace = generator.ApiCollection();
    var entity = generator.EntityVariable();

#>
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

using <#= platform #>.Contract;
using <#= platform #>.Contract.<#= DomainToolkit #>;
using <#= platform #>.Service.<#= DomainToolkit #>.Data;

<# if (DomainEntity == "Module") { #>
using ModuleHandle = Shift.Contract.Curriculums.ModuleHandle;

<# } #>
namespace <#= platform #>.Api.<#= DomainToolkit #>;

[ApiController]
[ApiExplorerSettings(GroupName = "<#= apiGroup #>")]
[Authorize]
public class <#= DomainEntity #>Controller : ControllerBase
{
    private readonly I<#= DomainEntity #>Service _<#= entity #>Service;

    public <#= DomainEntity #>Controller(I<#= DomainEntity #>Service <#= entity #>Service)
    {
        _<#= entity #>Service = <#= entity #>Service;
    }

    [Authorize(<#= apiSpace #>.Get)]
    [HttpGet(<#= apiSpace #>.Get)]
    [ProducesResponseType(typeof(<#= DomainEntity #>Model), StatusCodes.Status200OK)]
    public async Task<ActionResult<<#= DomainEntity #>Model>> Get(<#= parameters #>, CancellationToken token)
    {
        var model = await _<#= entity #>Service.GetAsync(<#= arguments #>, token);

        if (model == null)
            return NotFound();

        return Ok(model);
    }

    [Authorize(<#= apiSpace #>.List)]
    [HttpGet(<#= apiSpace #>.List)]
    [ProducesResponseType(typeof(IEnumerable<<#= DomainEntity #>Model>), StatusCodes.Status200OK)]
    public async Task<ActionResult<IEnumerable<<#= DomainEntity #>Model>>> List([FromQuery] <#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        var models = await _<#= entity #>Service.ListAsync(criteria, token);

        var count = await _<#= entity #>Service.CountAsync(criteria, token);

        Response.AddPagination(criteria.Page, criteria.Take, models.Count(), count);

        return Ok(models);
    }

    [Authorize(<#= apiSpace #>.Count)]
    [HttpGet(<#= apiSpace #>.Count)]
    [ProducesResponseType(typeof(int), StatusCodes.Status200OK)]
    public async Task<ActionResult<int>> Count([FromQuery] <#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        var count = await _<#= entity #>Service.CountAsync(criteria, token);

        return Ok(count);
    }

    [Authorize(<#= apiSpace #>.Exists)]
    [HttpGet(<#= apiSpace #>.Exists)]
    [ProducesResponseType(typeof(bool), StatusCodes.Status200OK)]
    public async Task<ActionResult<bool>> Exists(<#= parameters #>, CancellationToken token)
    {
        var exists = await _<#= entity #>Service.ExistsAsync(<#= arguments #>, token);

        return Ok(exists);
    }

    [Authorize(<#= apiSpace #>.Search)]
    [HttpGet(<#= apiSpace #>.Search)]
    [ProducesResponseType(typeof(IEnumerable<<#= DomainEntity #>Handle>), StatusCodes.Status200OK)]
    public async Task<ActionResult<IEnumerable<<#= DomainEntity #>Handle>>> Search([FromQuery] <#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        var handles = await _<#= entity #>Service.SearchAsync(criteria, token);

        var count = await _<#= entity #>Service.CountAsync(criteria, token);

        Response.AddPagination(criteria.Page, criteria.Take, handles.Count(), count);

        return Ok(handles);
    }
}