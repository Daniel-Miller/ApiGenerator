<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="Common" #>
<#@ parameter type="System.String" name="Platform" #>
<#@ parameter type="System.String" name="DatabaseSchema" #>
<#@ parameter type="System.String" name="DatabaseTable" #>
<#@ parameter type="System.String" name="DomainToolkit" #>
<#@ parameter type="System.String" name="DomainToolset" #>
<#@ parameter type="System.String" name="DomainEntity" #>
<#@ include file="$(ProjectDir)\Include.ttinclude" once="true" #><#
    
    var table = GetTable(DatabaseSchema, DatabaseTable);
    
    string DomainEntityPlural = PluralizeNoun(DomainEntity);
    string entity = ConvertFirstLetterToLowercase(DomainEntity);

    var pkParameters = "";
    var pkExpression = "";
    var pkProperties = "";
    var pkValuesForCreate = "";
    var pkValuesForGet = "";
    var pkValuesForModify = "";
    for (int i = 0; i < table.PrimaryKey.Length; i++)
    {
        if (i > 0)
        {
            pkParameters += ", ";
            pkExpression += " && ";
            pkProperties += ", ";
            pkValuesForGet += ", ";
        }
        var column = table.PrimaryKey[i];
        var typeName = TypeNameOrAlias(column.DataType);
        pkParameters += "[FromRoute] " + typeName + " " + ConvertFirstLetterToLowercase(column.ColumnName);
        pkExpression += "x." + column.ColumnName + " == " + ConvertFirstLetterToLowercase(column.ColumnName);
        pkProperties += ConvertFirstLetterToLowercase(column.ColumnName);
        pkValuesForCreate += column.ColumnName + " {create." + column.ColumnName + "}";
        pkValuesForGet += "create." + column.ColumnName;
        pkValuesForModify += column.ColumnName + " {" + ConvertFirstLetterToLowercase(column.ColumnName) + "}";
    }

    var apiGroup = DomainToolkit;
    if (DomainToolset != "-")
        apiGroup += ": " + DomainToolset;

    var apiSpace = "TableApiEndpoints." + DomainToolkit + "Api";
    if (DomainToolset != "-")
        apiSpace += "." + DomainToolset;
    if (DomainEntity != "-")
        apiSpace += "." + DomainEntity;
#>
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

using <#= Common #>.Contract;

using <#= Platform #>.Contract;
using <#= Platform #>.Contract.<#= DomainToolkit #>;
using <#= Platform #>.Service.<#= DomainToolkit #>.Data;

<# if (DomainEntity == "Module") { #>
using ModuleHandle = Shift.Contract.Curriculums.ModuleHandle;

<# } #>
namespace <#= Platform #>.Api.<#= DomainToolkit #>;

[ApiController]
[ApiExplorerSettings(GroupName = "<#= apiGroup #>")]
[Authorize]
public class <#= DomainEntity #>Controller : ControllerBase
{
    private readonly I<#= DomainEntity #>Service _<#= entity #>Service;

    public <#= DomainEntity #>Controller(I<#= DomainEntity #>Service <#= entity #>Service)
    {
        _<#= entity #>Service = <#= entity #>Service;
    }

    [Authorize(<#= apiSpace #>.Get)]
    [HttpGet(<#= apiSpace #>.Get)]
    [ProducesResponseType(typeof(<#= DomainEntity #>Model), StatusCodes.Status200OK)]
    public async Task<ActionResult<<#= DomainEntity #>Model>> Get(<#= pkParameters #>, CancellationToken token)
    {
        var model = await _<#= entity #>Service.GetAsync(<#= pkProperties #>, token);

        if (model == null)
            return NotFound();

        return Ok(model);
    }

    [Authorize(<#= apiSpace #>.List)]
    [HttpGet(<#= apiSpace #>.List)]
    [ProducesResponseType(typeof(IEnumerable<<#= DomainEntity #>Model>), StatusCodes.Status200OK)]
    public async Task<ActionResult<IEnumerable<<#= DomainEntity #>Model>>> List([FromQuery] <#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        var models = await _<#= entity #>Service.ListAsync(criteria, token);

        var count = await _<#= entity #>Service.CountAsync(criteria, token);

        Response.AddPagination(criteria.Page, criteria.Take, models.Count(), count);

        return Ok(models);
    }

    [Authorize(<#= apiSpace #>.Search)]
    [HttpGet(<#= apiSpace #>.Search)]
    [ProducesResponseType(typeof(IEnumerable<<#= DomainEntity #>Handle>), StatusCodes.Status200OK)]
    public async Task<ActionResult<IEnumerable<<#= DomainEntity #>Handle>>> Search([FromQuery] <#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        var handles = await _<#= entity #>Service.SearchAsync(criteria, token);

        var count = await _<#= entity #>Service.CountAsync(criteria, token);

        Response.AddPagination(criteria.Page, criteria.Take, handles.Count(), count);

        return Ok(handles);
    }

    [Authorize(<#= apiSpace #>.Create)]
    [HttpPost(<#= apiSpace #>.Create)]
    [ProducesResponseType(typeof(<#= DomainEntity #>Model), StatusCodes.Status201Created)]
    [ProducesResponseType(typeof(ValidationFailureResponse), StatusCodes.Status400BadRequest)]
    public async Task<ActionResult<<#= DomainEntity #>Model>> Create([FromBody] Create<#= DomainEntity #> create, CancellationToken token)
    {
        var created = await _<#= entity #>Service.CreateAsync(create, token);

        if (!created)
            return BadRequest($"Duplicate not permitted: <#= pkValuesForCreate #>. You cannot insert a duplicate object with the same primary key.");

        var model = await _<#= entity #>Service.GetAsync(<#= pkValuesForGet #>, token);

        return CreatedAtAction(nameof(Create), model);
    }

    [Authorize(<#= apiSpace #>.Delete)]
    [HttpDelete(<#= apiSpace #>.Delete)]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    public async Task<IActionResult> Delete(<#= pkParameters #>, CancellationToken token)
    {
        var deleted = await _<#= entity #>Service.DeleteAsync(<#= pkProperties #>, token);
        
        if (!deleted)
            return NotFound();
        
        return Ok();
    }

    [Authorize(<#= apiSpace #>.Modify)]
    [HttpPut(<#= apiSpace #>.Modify)]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [ProducesResponseType(typeof(ValidationFailureResponse), StatusCodes.Status400BadRequest)]
    public async Task<IActionResult> Modify(<#= pkParameters #>, [FromBody] Modify<#= DomainEntity #> modify, CancellationToken token)
    {
        var model = await _<#= entity #>Service.GetAsync(<#= pkProperties #>, token);

        if (model is null)
            return NotFound($"<#= DomainEntity #> not found: <#= pkValuesForModify #>. You cannot modify an object that is not in the database.");

        var modified = await _<#= entity #>Service.ModifyAsync(<#= pkProperties #>, modify, token);

        if (!modified)
            return NotFound();
        
        return Ok();
    }
}