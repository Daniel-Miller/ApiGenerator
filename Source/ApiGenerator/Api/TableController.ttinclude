<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="DomainToolkit" #>
<#@ parameter type="System.String" name="DomainFeature" #>
<#@ parameter type="System.String" name="DomainEntity" #>
<#@ assembly name="$(SolutionDir)\..\Build\ApiGenerator.Utility.dll" #>
<#@ import namespace="ApiGenerator.Utility" #><#
    
    var platform = Settings.PlatformName;
    var database = new Database();
    var endpoints = database.GetEndpoints();
    var endpoint = endpoints.GetEndpoint(DomainToolkit, DomainFeature, DomainEntity);
    var entities = Inflector.PluralizeNoun(DomainEntity);

    var generator = new Generator(endpoint, "Api");
    var parameters = generator.PrimaryKeyMethodParameters();
    var arguments = generator.PrimaryKeyMethodArguments();
    var expression = generator.PrimaryKeyEqualityExpression();
    var values = generator.PrimaryKeyPropertyValues();
    var pkValuesForCreate = generator.PrimaryKeyPropertyValuesForCreate();
    var pkValuesForGet = generator.PrimaryKeyPropertyValuesForGet();
    var pkValuesForModify = generator.PrimaryKeyPropertyValuesForModify();

    var apiGroup = generator.ApiGroup();
    var apiRoute = "Endpoints." + generator.ApiCollection();
    var entity = generator.EntityVariable();

#>
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

using Common;

using <#= platform #>.Contract;
<#= generator.UsingStatements("Contract") #>
<#= generator.UsingStatements("Service") #>

<# if (DomainEntity == "Module") { #>
using ModuleHandle = Shift.Contract.Curriculums.ModuleHandle;

<# } #>
namespace <#= generator.Namespace() #>;

[ApiController]
[ApiExplorerSettings(GroupName = "<#= apiGroup #>")]
[Authorize]
public class <#= DomainEntity #>Controller : ControllerBase
{
    private readonly I<#= DomainEntity #>Service _<#= entity #>Service;

    public <#= DomainEntity #>Controller(I<#= DomainEntity #>Service <#= entity #>Service)
    {
        _<#= entity #>Service = <#= entity #>Service;
    }

    [Authorize(<#= apiRoute #>.Get)]
    [HttpGet(<#= apiRoute #>.Get)]
    [ProducesResponseType(typeof(<#= DomainEntity #>Model), StatusCodes.Status200OK)]
    public async Task<ActionResult<<#= DomainEntity #>Model>> Get(<#= parameters #>, CancellationToken token)
    {
        var model = await _<#= entity #>Service.GetAsync(<#= arguments #>, token);

        if (model == null)
            return NotFound();

        return Ok(model);
    }

    [Authorize(<#= apiRoute #>.List)]
    [HttpGet(<#= apiRoute #>.List)]
    [ProducesResponseType(typeof(IEnumerable<<#= DomainEntity #>Model>), StatusCodes.Status200OK)]
    public async Task<ActionResult<IEnumerable<<#= DomainEntity #>Model>>> List([FromQuery] <#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        var models = await _<#= entity #>Service.ListAsync(criteria, token);

        var count = await _<#= entity #>Service.CountAsync(criteria, token);

        Response.AddPagination(criteria.Page, criteria.Take, models.Count(), count);

        return Ok(models);
    }

    [Authorize(<#= apiRoute #>.Create)]
    [HttpPost(<#= apiRoute #>.Create)]
    [ProducesResponseType(typeof(<#= DomainEntity #>Model), StatusCodes.Status201Created)]
    [ProducesResponseType(typeof(ValidationFailure), StatusCodes.Status400BadRequest)]
    public async Task<ActionResult<<#= DomainEntity #>Model>> Create([FromBody] Create<#= DomainEntity #> create, CancellationToken token)
    {
        var created = await _<#= entity #>Service.CreateAsync(create, token);

        if (!created)
            return BadRequest($"Duplicate not permitted: <#= pkValuesForCreate #>. You cannot insert a duplicate object with the same primary key.");

        var model = await _<#= entity #>Service.GetAsync(<#= pkValuesForGet #>, token);

        return CreatedAtAction(nameof(Create), model);
    }

    [Authorize(<#= apiRoute #>.Modify)]
    [HttpPut(<#= apiRoute #>.Modify)]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    [ProducesResponseType(typeof(ValidationFailure), StatusCodes.Status400BadRequest)]
    public async Task<IActionResult> Modify(<#= parameters #>, [FromBody] Modify<#= DomainEntity #> modify, CancellationToken token)
    {
        var model = await _<#= entity #>Service.GetAsync(<#= arguments #>, token);

        if (model is null)
            return NotFound($"<#= DomainEntity #> not found: <#= pkValuesForModify #>. You cannot modify an object that is not in the database.");

        var modified = await _<#= entity #>Service.ModifyAsync(<#= arguments #>, modify, token);

        if (!modified)
            return NotFound();
        
        return Ok();
    }

    [Authorize(<#= apiRoute #>.Delete)]
    [HttpDelete(<#= apiRoute #>.Delete)]
    [ProducesResponseType(StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status404NotFound)]
    public async Task<IActionResult> Delete(<#= parameters #>, CancellationToken token)
    {
        var deleted = await _<#= entity #>Service.DeleteAsync(<#= arguments #>, token);
        
        if (!deleted)
            return NotFound();
        
        return Ok();
    }

    [Authorize(<#= apiRoute #>.Count)]
    [HttpGet(<#= apiRoute #>.Count)]
    [ProducesResponseType(typeof(int), StatusCodes.Status200OK)]
    public async Task<ActionResult<int>> Count([FromQuery] <#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        var count = await _<#= entity #>Service.CountAsync(criteria, token);

        return Ok(count);
    }

    [Authorize(<#= apiRoute #>.Exists)]
    [HttpGet(<#= apiRoute #>.Exists)]
    [ProducesResponseType(typeof(bool), StatusCodes.Status200OK)]
    public async Task<ActionResult<bool>> Exists(<#= parameters #>, CancellationToken token)
    {
        var exists = await _<#= entity #>Service.ExistsAsync(<#= arguments #>, token);

        return Ok(exists);
    }

    [Authorize(<#= apiRoute #>.Search)]
    [HttpGet(<#= apiRoute #>.Search)]
    [ProducesResponseType(typeof(IEnumerable<<#= DomainEntity #>Handle>), StatusCodes.Status200OK)]
    public async Task<ActionResult<IEnumerable<<#= DomainEntity #>Handle>>> Search([FromQuery] <#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        var handles = await _<#= entity #>Service.SearchAsync(criteria, token);

        var count = await _<#= entity #>Service.CountAsync(criteria, token);

        Response.AddPagination(criteria.Page, criteria.Take, handles.Count(), count);

        return Ok(handles);
    }
}