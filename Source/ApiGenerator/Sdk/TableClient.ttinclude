<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="Common" #>
<#@ parameter type="System.String" name="Platform" #>
<#@ parameter type="System.String" name="DatabaseObject" #>
<#@ parameter type="System.String" name="DatabaseSchema" #>
<#@ parameter type="System.String" name="DatabaseTable" #>
<#@ parameter type="System.String" name="DomainToolkit" #>
<#@ parameter type="System.String" name="DomainToolset" #>
<#@ parameter type="System.String" name="DomainEntity" #>
<#@ include file="$(ProjectDir)\Include.ttinclude" once="true" #><#
    
    var table = GetTable(DatabaseSchema, DatabaseTable);
    
    string ApiEndpoints = DatabaseObject + "ApiEndpoints";
    string DomainEntityPlural = PluralizeNoun(DomainEntity);
    string entity = ConvertFirstLetterToLowercase(DomainEntity);

    var pkParameters = "";
    var pkExpression = "";
    var pkProperties = "";
    var pkValuesForCreate = "";
    var pkValuesForUpdate = "";
    for (int i = 0; i < table.PrimaryKey.Length; i++)
    {
        if (i > 0)
        {
            pkParameters += ", ";
            pkExpression += " && ";
            pkProperties += ", ";
        }
        var column = table.PrimaryKey[i];
        var typeName = TypeNameOrAlias(column.DataType);
        pkParameters += typeName + " " + ConvertFirstLetterToLowercase(column.ColumnName);
        pkExpression += "x." + column.ColumnName + " == " + ConvertFirstLetterToLowercase(column.ColumnName);
        pkProperties += ConvertFirstLetterToLowercase(column.ColumnName);
        pkValuesForCreate += column.ColumnName + " {entity." + column.ColumnName + "}";
        pkValuesForUpdate += column.ColumnName + " {" + ConvertFirstLetterToLowercase(column.ColumnName) + "}";
    }

    var apiGroup = DomainToolkit;
    if (DomainToolset != "-")
        apiGroup += ": " + DomainToolset;

    var apiSpace = DomainToolkit + "Api";
    if (DomainToolset != "-")
        apiSpace += "." + DomainToolset;
    if (DomainEntity != "-")
        apiSpace += "." + DomainEntity;
#>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

using <#= Common #>.Contract;
using <#= Common #>.Sdk;

using <#= Platform #>.Contract;
using <#= Platform #>.Contract.<#= DomainToolkit #>;

<# if (DomainEntity == "Module") { #>
using ModuleHandle = Shift.Contract.Curriculums.ModuleHandle;

<# } #>
namespace <#= Platform #>.Sdk.<#= DomainToolkit #>
{
    public class <#= DomainEntity #>Client
    {
        private readonly SdkClient _sdk;

        public <#= DomainEntity #>Client(IApiClientFactory factory)
            => _sdk = new SdkClient(factory);

        public Pagination GetPagination()
            => _sdk.Pagination;

        // Asynchronous

        public async Task<<#= DomainEntity #>Model> GetItemAsync(<#= pkParameters #>)
            => await _sdk.GetItem<<#= DomainEntity #>Model>(<#= ApiEndpoints #>.<#= apiSpace #>.Collection, <#= pkProperties #>);

        public async Task<IEnumerable<<#= DomainEntity #>Model>> GetListAsync(<#= DomainEntity #>Criteria criteria)
            => await _sdk.GetList<<#= DomainEntity #>Model>(<#= ApiEndpoints #>.<#= apiSpace #>.Collection, _sdk.ConvertToDictionary(criteria));
        
        public async Task<IEnumerable<<#= DomainEntity #>Handle>> SearchAsync(<#= DomainEntity #>Criteria criteria)
            => await _sdk.GetList<<#= DomainEntity #>Handle>(<#= ApiEndpoints #>.<#= apiSpace #>.Search, _sdk.ConvertToDictionary(criteria));

        public async Task<<#= DomainEntity #>Model> CreateAsync(Create<#= DomainEntity #> request)
            => await _sdk.Create<<#= DomainEntity #>Model>(<#= ApiEndpoints #>.<#= apiSpace #>.Collection, request);
            
        public async Task ModifyAsync(Modify<#= DomainEntity #> request, <#= pkParameters #>)
            => await _sdk.Modify(<#= ApiEndpoints #>.<#= apiSpace #>.Collection, <#= pkProperties #>, request);

        public async Task DeleteAsync(<#= pkParameters #>)
            => await _sdk.Delete(<#= ApiEndpoints #>.<#= apiSpace #>.Collection, <#= pkProperties #>);

        // Synchronous

        public <#= DomainEntity #>Model GetItem(<#= pkParameters #>)
            => Task.Run(() => GetItemAsync(<#= pkProperties #>)).GetAwaiter().GetResult();

        public IEnumerable<<#= DomainEntity #>Model> GetList(<#= DomainEntity #>Criteria criteria)
            => Task.Run(() => GetListAsync(criteria)).GetAwaiter().GetResult();
        
        public IEnumerable<<#= DomainEntity #>Handle> Search(<#= DomainEntity #>Criteria criteria)
            => Task.Run(() => SearchAsync(criteria)).GetAwaiter().GetResult();

        public <#= DomainEntity #>Model Create(Create<#= DomainEntity #> request)
            => Task.Run(() => CreateAsync(request)).GetAwaiter().GetResult();

        public void Modify(Modify<#= DomainEntity #> request, <#= pkParameters #>)
            => Task.Run(() => ModifyAsync(request, <#= pkProperties #>)).GetAwaiter().GetResult();

        public void Delete(<#= pkParameters #>)
            => Task.Run(() => DeleteAsync(<#= pkProperties #>)).GetAwaiter().GetResult();
    }   
}