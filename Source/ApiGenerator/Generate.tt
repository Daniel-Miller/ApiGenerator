<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ assembly name="$(SolutionDir)\..\Build\ApiGenerator.Utility.dll" #>
<#@ import namespace="ApiGenerator.Utility" #>
<#
    var engine = new Engine();
    var session = new TextTemplatingSession();
    var templates = Host.ResolveAssemblyReference("$(ProjectDir)");

    var output = Settings.OutputDirectory;
    var platform = Settings.PlatformName;;
    
    var database = new Database();
    var endpoints = database.GetEndpoints();

    GenerateEndpointConstants(engine, session, endpoints, templates, $@"{output}\{platform}.Contract");
        
    foreach (var endpoint in endpoints)
    {
        // Uncomment the code-generation function for each library you want to generate.

        // Contract - Requests, Responses, SDK Clients
        GenerateContractLibrary(engine, session, endpoint, templates, $@"{output}\{platform}.Contract");
        GenerateContractTestLibrary(engine, session, endpoint, templates, $@"{output}\{platform}.Contract.Test");

        // Service - Entities, Adapters, Repositories
        GenerateServiceLibrary(engine, session, endpoint, templates, $@"{output}\{platform}.Service");

        // API - Controllers
        GenerateApiLibrary(engine, session, endpoint, templates, $@"{output}\{platform}.Api");
    }
#>
<#+
    public void GenerateEndpointConstants(Engine engine, TextTemplatingSession session, IEnumerable<Endpoint> endpoints, string templates, string output)
    {
        var source = $@"{templates}\Contract\Endpoints";
        var folder = GeneratePath(output, "Foundation", "Data");

        GenerateClass(engine, session, null, $@"{source}\TableEndpoints.ttinclude", $@"{folder}\TableEndpoints.cs");
        GenerateClass(engine, session, null, $@"{source}\ViewEndpoints.ttinclude", $@"{folder}\ViewEndpoints.cs");
        // TODO: GenerateClass(engine, session, null, $@"{source}\ProcedureEndpoints.ttinclude", $@"{folder}\ProcedureEndpoints.cs");

        folder = GeneratePath(output, "Foundation", "State");

        GenerateClass(engine, session, null, $@"{source}\ProjectionEndpoints.ttinclude", $@"{folder}\ProjectionEndpoints.cs");

        folder = GeneratePath(output, "Foundation", "Process");

        // TODO: GenerateClass(engine, session, null, $@"{source}\CommandEndpoints.ttinclude", $@"{folder}\CommandEndpoints.cs");
        // TODO: GenerateClass(engine, session, null, $@"{source}\QueryEndpoints.ttinclude", $@"{folder}\QueryEndpoints.cs");
    }
    
    public void GenerateContractLibrary(Engine engine, TextTemplatingSession session, Endpoint endpoint, string templates, string output)
    {
        var source = $@"{templates}\Contract";
        var folder = GeneratePath(output, endpoint.DomainToolkit, endpoint.DomainFeature, endpoint.Layer, endpoint.Components, endpoint.DomainEntity);

        GenerateClass(engine, session, endpoint, $@"{source}\Criteria.ttinclude", $@"{folder}\{endpoint.DomainEntity}Criteria.cs");
        GenerateClass(engine, session, endpoint, $@"{source}\Model.ttinclude", $@"{folder}\{endpoint.DomainEntity}Model.cs");
        GenerateClass(engine, session, endpoint, $@"{source}\Handle.ttinclude", $@"{folder}\{endpoint.DomainEntity}Handle.cs");
        
        if (endpoint.Component == "Table")
        {
            GenerateClass(engine, session, endpoint, $@"{source}\CreateRequest.ttinclude", $@"{folder}\Create{endpoint.DomainEntity}.cs");
            GenerateClass(engine, session, endpoint, $@"{source}\ModifyRequest.ttinclude", $@"{folder}\Modify{endpoint.DomainEntity}.cs");
        }

        GenerateClass(engine, session, endpoint, $@"{source}\Clients\{endpoint.Component}Client.ttinclude", $@"{folder}\{endpoint.DomainEntity}Client.cs");
    }

    public void GenerateContractTestLibrary(Engine engine, TextTemplatingSession session, Endpoint endpoint, string templates, string output)
    {
        var source = $@"{templates}\Contract.Test";
        var folder = GeneratePath(output, endpoint.DomainToolkit, endpoint.DomainFeature, endpoint.Layer, endpoint.Components);
        GenerateClass(engine, session, endpoint, $@"{source}\TableClientTests.ttinclude", $@"{folder}\{endpoint.DomainEntity}ClientTests.cs");
    }

    public void GenerateServiceLibrary(Engine engine, TextTemplatingSession session, Endpoint endpoint, string templates, string output)
    {
        var source = $@"{templates}\Service";
        var folder = GeneratePath(output, endpoint.DomainToolkit, endpoint.DomainFeature, endpoint.Layer, endpoint.Components, endpoint.DomainEntity);

        GenerateClass(engine, session, endpoint, $@"{source}\CriteriaValidator.ttinclude", $@"{folder}\{endpoint.DomainEntity}CriteriaValidator.cs");
        GenerateClass(engine, session, endpoint, $@"{source}\TableEntity.ttinclude", $@"{folder}\{endpoint.DomainEntity}Entity.cs");
        GenerateClass(engine, session, endpoint, $@"{source}\TableEntityConfiguration.ttinclude", $@"{folder}\{endpoint.DomainEntity}EntityConfiguration.cs");
        GenerateClass(engine, session, endpoint, $@"{source}\TableSearch.ttinclude", $@"{folder}\{endpoint.DomainEntity}Search.cs");

        if (endpoint.Component == "Table" || endpoint.Component == "Projection")
        {
            GenerateClass(engine, session, endpoint, $@"{source}\TableEntityValidator.ttinclude", $@"{folder}\{endpoint.DomainEntity}EntityValidator.cs");
            GenerateClass(engine, session, endpoint, $@"{source}\TableStore.ttinclude", $@"{folder}\{endpoint.DomainEntity}Store.cs");
        }

        GenerateClass(engine, session, endpoint, $@"{source}\{endpoint.Component}Adapter.ttinclude", $@"{folder}\{endpoint.DomainEntity}Adapter.cs");
        GenerateClass(engine, session, endpoint, $@"{source}\{endpoint.Component}Service.ttinclude", $@"{folder}\{endpoint.DomainEntity}Service.cs");
    }

    public void GenerateApiLibrary(Engine engine, TextTemplatingSession session, Endpoint endpoint, string templates, string output)
    {
        var source = $@"{templates}\Api";
        var folder = GeneratePath(output, endpoint.DomainToolkit, endpoint.DomainFeature, endpoint.Layer, endpoint.Components);
        GenerateClass(engine, session, endpoint, $@"{source}\{endpoint.Component}Controller.ttinclude", $@"{folder}\{endpoint.DomainEntity}Controller.cs");
    }

    public void GenerateClass(Engine engine, TextTemplatingSession session, Endpoint endpoint, string input, string output)
    {
        if (endpoint != null) 
        {
            session["DomainToolkit"] = endpoint.DomainToolkit;
            session["DomainFeature"] = endpoint.DomainFeature;
            session["DomainEntity"] = endpoint.DomainEntity;
        }

        var sessionHost = (ITextTemplatingSessionHost) this.Host;
        sessionHost.Session = session;

        string templateFile = input;
        string templateContent = File.ReadAllText(templateFile);
                
        string generatedContent = engine.ProcessTemplate(templateContent, Host);

        File.WriteAllText(output, generatedContent);
    }

    public string CreateFolder(string folder)
    {
        if (!Directory.Exists(folder))
            Directory.CreateDirectory(folder);
        return folder;
    }

    public string GeneratePath(string a, string b, string c = "-", string d = "-", string e = "-", string f = "-")
    {
        var path = a;

        if (b != "-")
            path += $@"\{b}";

        if (c != "-")
            path += $@"\{c}";
        
        if (d != "-")
            path += $@"\{d}";

        if (e != "-")
            path += $@"\{e}";

        if (f != "-")
            path += $@"\{f}";
         
        return CreateFolder(path);
    }
#>