<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="Include.ttinclude" once="true" #>
<#
    var settings = GetSettings();

    var common = settings.CommonName;
    var output = settings.OutputDirectory;
    var platform = settings.PlatformName;

    var endpoints = GetEndpoints(); // .Where(x => x.DomainToolkit == "Communications");
    
    TextTemplatingSession session = new TextTemplatingSession();
    session["Common"] = settings.CommonName;
    session["Platform"] = settings.PlatformName;

    Engine engine = new Engine();

    var project = Host.ResolveAssemblyReference("$(ProjectDir)");
    var root = CreateFolder($@"{output}\{platform}.Contract");

    var endpointFolder = $@"{root}\Foundation";
    CreateFolder(endpointFolder);

    GenerateClass(engine, session, null, $@"{project}\Contract\Endpoints\TableApiEndpoints.ttinclude", $@"{endpointFolder}\TableApiEndpoints.cs");
    GenerateClass(engine, session, null, $@"{project}\Contract\Endpoints\QueryApiEndpoints.ttinclude", $@"{endpointFolder}\QueryApiEndpoints.cs");
    GenerateClass(engine, session, null, $@"{project}\Contract\Endpoints\ViewApiEndpoints.ttinclude", $@"{endpointFolder}\ViewApiEndpoints.cs");

    foreach (var endpoint in endpoints)
    {
        // Uncomment the code-generation function for each layer you want to generate.

        // Contract - Requests and Responses
        // GenerateContractLayer(engine, session, endpoint, project, $@"{output}\{platform}.Contract");

        // Service - Repositories (Entities and Adapters, Search and Store)
        // GenerateServiceLayer(engine, session, endpoint, project, $@"{output}\{platform}.Service");

        // SDK - Clients
        // GenerateSdkLayer(engine, session, endpoint, project, $@"{output}\{platform}.Sdk");

        // API - Controllers
        // GenerateApiLayer(engine, session, endpoint, project, $@"{output}\{platform}.Api");

        // Unit Tests
        // GenerateTestLayer(engine, session, endpoint, project, $@"{output}\{platform}.Test");
    }
#>
<#+
    public void GenerateContractLayer(Engine engine, TextTemplatingSession session, ApiEndpoint endpoint, string project, string root)
    {
        var subtype = PluralizeNoun(endpoint.DatabaseObject);
        var folder = GeneratePath(root, endpoint.DomainToolkit, endpoint.DomainToolset, "Data", subtype, endpoint.DomainEntity);

        GenerateClass(engine, session, endpoint, $@"{project}\Contract\Criteria.ttinclude", $@"{folder}\{endpoint.DomainEntity}Criteria.cs");
        GenerateClass(engine, session, endpoint, $@"{project}\Contract\Model.ttinclude", $@"{folder}\{endpoint.DomainEntity}Model.cs");
        
        GenerateClass(engine, session, endpoint, $@"{project}\Contract\Handle.ttinclude", $@"{folder}\{endpoint.DomainEntity}Handle.cs");
        
        if (subtype == "Tables")
        {
            GenerateClass(engine, session, endpoint, $@"{project}\Contract\CreateRequest.ttinclude", $@"{folder}\Create{endpoint.DomainEntity}.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Contract\ModifyRequest.ttinclude", $@"{folder}\Modify{endpoint.DomainEntity}.cs");
        }
    }

    public void GenerateServiceLayer(Engine engine, TextTemplatingSession session, ApiEndpoint endpoint, string project, string root)
    {
        var subtype = PluralizeNoun(endpoint.DatabaseObject);
        var folder = GeneratePath(root, endpoint.DomainToolkit, endpoint.DomainToolset, "Data", subtype, endpoint.DomainEntity);

        GenerateClass(engine, session, endpoint, $@"{project}\Service\CriteriaValidator.ttinclude", $@"{folder}\{endpoint.DomainEntity}CriteriaValidator.cs");
        GenerateClass(engine, session, endpoint, $@"{project}\Service\TableEntity.ttinclude", $@"{folder}\{endpoint.DomainEntity}Entity.cs");
        GenerateClass(engine, session, endpoint, $@"{project}\Service\TableEntityConfiguration.ttinclude", $@"{folder}\{endpoint.DomainEntity}EntityConfiguration.cs");
            
        if (subtype == "Tables" || subtype == "Queries")
        {
            GenerateClass(engine, session, endpoint, $@"{project}\Service\{endpoint.DatabaseObject}Adapter.ttinclude", $@"{folder}\{endpoint.DomainEntity}Adapter.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Service\TableEntityValidator.ttinclude", $@"{folder}\{endpoint.DomainEntity}EntityValidator.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Service\TableSearch.ttinclude", $@"{folder}\{endpoint.DomainEntity}Search.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Service\TableStore.ttinclude", $@"{folder}\{endpoint.DomainEntity}Store.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Service\{endpoint.DatabaseObject}Service.ttinclude", $@"{folder}\{endpoint.DomainEntity}Service.cs");
        }
        else if (subtype == "Views")
        {
            GenerateClass(engine, session, endpoint, $@"{project}\Service\ViewAdapter.ttinclude", $@"{folder}\{endpoint.DomainEntity}Adapter.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Service\ViewSearch.ttinclude", $@"{folder}\{endpoint.DomainEntity}Search.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Service\ViewService.ttinclude", $@"{folder}\{endpoint.DomainEntity}Service.cs");
        }
    }

    public void GenerateSdkLayer(Engine engine, TextTemplatingSession session, ApiEndpoint endpoint, string project, string root)
    {
        var subtype = PluralizeNoun(endpoint.DatabaseObject);
        var folder = GeneratePath(root, endpoint.DomainToolkit, endpoint.DomainToolset);
        GenerateClass(engine, session, endpoint, $@"{project}\Sdk\{endpoint.DatabaseObject}Client.ttinclude", $@"{folder}\{endpoint.DomainEntity}Client.cs");
    }

    public void GenerateApiLayer(Engine engine, TextTemplatingSession session, ApiEndpoint endpoint, string project, string root)
    {
        var subtype = PluralizeNoun(endpoint.DatabaseObject);
        var folder = GeneratePath(root, endpoint.DomainToolkit, endpoint.DomainToolset);
        GenerateClass(engine, session, endpoint, $@"{project}\Api\{endpoint.DatabaseObject}Controller.ttinclude", $@"{folder}\{endpoint.DomainEntity}Controller.cs");
    }

    public void GenerateTestLayer(Engine engine, TextTemplatingSession session, ApiEndpoint endpoint, string project, string root)
    {
        var subtype = PluralizeNoun(endpoint.DatabaseObject);
        var folder = GeneratePath(root, endpoint.DomainToolkit, endpoint.DomainToolset);
        GenerateClass(engine, session, endpoint, $@"{project}\Test\{endpoint.DatabaseObject}ClientTests.ttinclude", $@"{folder}\{endpoint.DomainEntity}ClientTests.cs");
    }

    public void GenerateClass(Engine engine, TextTemplatingSession session, ApiEndpoint endpoint, string input, string output)
    {
        if (endpoint != null) 
        {
            session["DatabaseObject"] = endpoint.DatabaseObject;
            session["DatabaseSchema"] = endpoint.DatabaseSchema;
            session["DatabaseTable"] = endpoint.DatabaseTable;
            session["DatabasePrimaryKey"] = endpoint.DatabasePrimaryKey;

            session["DomainToolkit"] = endpoint.DomainToolkit;
            session["DomainToolset"] = endpoint.DomainToolset;
            session["DomainEntity"] = endpoint.DomainEntity;
        }

        var sessionHost = (ITextTemplatingSessionHost) this.Host;
        sessionHost.Session = session;

        string templateFile = input;
        string templateContent = File.ReadAllText(templateFile);
                
        string generatedContent = engine.ProcessTemplate(templateContent, Host);

        File.WriteAllText(output, generatedContent);
    }

    public string CreateFolder(string folder)
    {
        if (!Directory.Exists(folder))
            Directory.CreateDirectory(folder);
        return folder;
    }

    public string GeneratePath(string a, string b, string c, string d = "-", string e = "-", string f = "-")
    {
        var path = a;

        if (b != "-")
            path += $@"\{b}";

        if (c != "-")
            path += $@"\{c}";
        
        if (d != "-")
            path += $@"\{d}";

        if (e != "-")
            path += $@"\{e}";

        if (f != "-")
            path += $@"\{f}";
         
        return CreateFolder(path);
    }
#>