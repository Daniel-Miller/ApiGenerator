<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="Include.ttinclude" once="true" #>
<#
    var settings = GetSettings();

    var common = settings.CommonName;
    var output = settings.OutputDirectory;
    var platform = settings.PlatformName;

    var endpoints = GetEndpoints(); // .Where(x => x.DatabaseTable == "Standard");
    
    TextTemplatingSession session = new TextTemplatingSession();
    session["Common"] = settings.CommonName;
    session["Platform"] = settings.PlatformName;

    Engine engine = new Engine();

    var project = Host.ResolveAssemblyReference("$(ProjectDir)");
    var root = CreateFolder($@"{output}\{platform}.Contract");

    GenerateClass(engine, session, null, $@"{project}\Contract\Endpoints.ttinclude", $@"{root}\ApiEndpoints.cs");

    foreach (var endpoint in endpoints)
    {
        var isTable = IsTable(endpoint.DatabaseSchema, endpoint.DatabaseTable);

        // Instructions:
        // Uncomment the code-generation function for each layer you want to generate.

        // Contract - Requests and Responses
        // GenerateContractLayer(engine, session, endpoint, isTable, project, $@"{output}\{platform}.Contract");

        // Domain - Entities and Adapters
        // GenerateDomainLayer(engine, session, endpoint, isTable, project, $@"{output}\{platform}.Domain");

        // Persistence - Repositories (Search and Store)
        // GeneratePersistenceLayer(engine, session, endpoint, isTable, project, $@"{output}\{platform}.Persistence");

        // API - Controllers
        // GenerateApiLayer(engine, session, endpoint, isTable, project, $@"{output}\{platform}.Api");

        // SDK - Clients
        // GenerateSdkLayer(engine, session, endpoint, isTable, project, $@"{output}\{platform}.Sdk");
    }
#>
<#+
    public void GenerateContractLayer(Engine engine, TextTemplatingSession session, ApiEndpoint endpoint, bool isTable, string project, string root)
    {
        var folder = GeneratePath(root, endpoint.DomainToolkit, endpoint.DomainToolset, endpoint.DomainEntity);

        if (isTable)
        {
            GenerateClass(engine, session, endpoint, $@"{project}\Contract\SearchRequest.ttinclude", $@"{folder}\{endpoint.DomainEntity}SearchRequest.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Contract\SearchResponse.ttinclude", $@"{folder}\{endpoint.DomainEntity}SearchResponse.cs");

            GenerateClass(engine, session, endpoint, $@"{project}\Contract\CreateRequest.ttinclude", $@"{folder}\{endpoint.DomainEntity}CreateRequest.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Contract\UpdateRequest.ttinclude", $@"{folder}\{endpoint.DomainEntity}UpdateRequest.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Contract\GetResponse.ttinclude", $@"{folder}\{endpoint.DomainEntity}GetResponse.cs");
        }
        else
        {
            GenerateClass(engine, session, endpoint, $@"{project}\Contract\SearchRequest.ttinclude", $@"{folder}\{endpoint.DomainEntity}SearchRequest.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Contract\GetResponse.ttinclude", $@"{folder}\{endpoint.DomainEntity}GetResponse.cs");
        }
    }
    
    public void GenerateDomainLayer(Engine engine, TextTemplatingSession session, ApiEndpoint endpoint, bool isTable, string project, string root)
    {
        var folder = GeneratePath(root, endpoint.DomainToolkit, endpoint.DomainToolset, endpoint.DomainEntity);

        if (isTable)
        {
            GenerateClass(engine, session, endpoint, $@"{project}\Domain\Table.ttinclude", $@"{folder}\{endpoint.DomainEntity}Entity.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Domain\TableAdapter.ttinclude", $@"{folder}\{endpoint.DomainEntity}Adapter.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Domain\TableSearchCriteria.ttinclude", $@"{folder}\{endpoint.DomainEntity}SearchCriteria.cs");
        }
        else
        {
            GenerateClass(engine, session, endpoint, $@"{project}\Domain\Table.ttinclude", $@"{folder}\{endpoint.DomainEntity}Entity.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Domain\QueryAdapter.ttinclude", $@"{folder}\{endpoint.DomainEntity}Adapter.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Domain\TableSearchCriteria.ttinclude", $@"{folder}\{endpoint.DomainEntity}SearchCriteria.cs");
        }
    }

    public void GeneratePersistenceLayer(Engine engine, TextTemplatingSession session, ApiEndpoint endpoint, bool isTable, string project, string root)
    {
        var folder = GeneratePath(root, endpoint.DomainToolkit, endpoint.DomainToolset, endpoint.DomainEntity);

        if (isTable)
        {
            GenerateClass(engine, session, endpoint, $@"{project}\Persistence\TableConfiguration.ttinclude", $@"{folder}\{endpoint.DomainEntity}EntityConfiguration.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Persistence\TableSearch.ttinclude", $@"{folder}\{endpoint.DomainEntity}Search.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Persistence\TableSearchCriteriaValidator.ttinclude", $@"{folder}\{endpoint.DomainEntity}SearchCriteriaValidator.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Persistence\TableService.ttinclude", $@"{folder}\{endpoint.DomainEntity}Service.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Persistence\TableStore.ttinclude", $@"{folder}\{endpoint.DomainEntity}Store.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Persistence\TableValidator.ttinclude", $@"{folder}\{endpoint.DomainEntity}EntityValidator.cs");
        }
        else
        {
            GenerateClass(engine, session, endpoint, $@"{project}\Persistence\TableConfiguration.ttinclude", $@"{folder}\{endpoint.DomainEntity}EntityConfiguration.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Persistence\QuerySearch.ttinclude", $@"{folder}\{endpoint.DomainEntity}Search.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Persistence\TableSearchCriteriaValidator.ttinclude", $@"{folder}\{endpoint.DomainEntity}SearchCriteriaValidator.cs");
            GenerateClass(engine, session, endpoint, $@"{project}\Persistence\QueryService.ttinclude", $@"{folder}\{endpoint.DomainEntity}Service.cs");
        }
    }

    public void GenerateApiLayer(Engine engine, TextTemplatingSession session, ApiEndpoint endpoint, bool isTable, string project, string root)
    {
        var folder = GeneratePath(root, endpoint.DomainToolkit, endpoint.DomainToolset, "-");

        if (isTable)
        {
            GenerateClass(engine, session, endpoint, $@"{project}\Api\TableController.ttinclude", $@"{folder}\{endpoint.DomainEntity}Controller.cs");
        }
        else
        {
            GenerateClass(engine, session, endpoint, $@"{project}\Api\QueryController.ttinclude", $@"{folder}\{endpoint.DomainEntity}Controller.cs");
        }
    }

    public void GenerateSdkLayer(Engine engine, TextTemplatingSession session, ApiEndpoint endpoint, bool isTable, string project, string root)
    {
        var folder = GeneratePath(root, endpoint.DomainToolkit, endpoint.DomainToolset, "-");

        if (isTable)
        {
            GenerateClass(engine, session, endpoint, $@"{project}\Sdk\TableClient.ttinclude", $@"{folder}\{endpoint.DomainEntity}Client.cs");
        }
        else
        {
            GenerateClass(engine, session, endpoint, $@"{project}\Sdk\QueryClient.ttinclude", $@"{folder}\{endpoint.DomainEntity}Client.cs");
        }
    }

    public void GenerateClass(Engine engine, TextTemplatingSession session, ApiEndpoint endpoint, string input, string output)
    {
        if (endpoint != null) 
        {
            session["DatabaseSchema"] = endpoint.DatabaseSchema;
            session["DatabaseTable"] = endpoint.DatabaseTable;
            session["DatabasePrimaryKey"] = endpoint.DatabasePrimaryKey;

            session["DomainToolkit"] = endpoint.DomainToolkit;
            session["DomainToolset"] = endpoint.DomainToolset;
            session["DomainEntity"] = endpoint.DomainEntity;
        }

        var sessionHost = (ITextTemplatingSessionHost) this.Host;
        sessionHost.Session = session;

        string templateFile = input;
        string templateContent = File.ReadAllText(templateFile);
                
        string generatedContent = engine.ProcessTemplate(templateContent, Host);

        File.WriteAllText(output, generatedContent);
    }

    public string CreateFolder(string folder)
    {
        if (!Directory.Exists(folder))
            Directory.CreateDirectory(folder);
        return folder;
    }

    public string GeneratePath(string a, string b, string c, string d)
    {
        var path = a;

        if (b != "-")
            path += $@"\{b}";

        if (c != "-")
            path += $@"\{c}";
        
        if (d != "-")
            path += $@"\{d}";
         
        return CreateFolder(path);
    }
#>