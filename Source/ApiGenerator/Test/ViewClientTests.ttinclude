<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="Common" #>
<#@ parameter type="System.String" name="Platform" #>
<#@ parameter type="System.String" name="DatabaseObject" #>
<#@ parameter type="System.String" name="DatabaseSchema" #>
<#@ parameter type="System.String" name="DatabaseTable" #>
<#@ parameter type="System.String" name="DomainToolkit" #>
<#@ parameter type="System.String" name="DomainToolset" #>
<#@ parameter type="System.String" name="DomainEntity" #>
<#@ include file="$(ProjectDir)\Include.ttinclude" once="true" #><#
    
    var table = GetTable(DatabaseSchema, DatabaseTable);
    
    string ApiEndpoints = DatabaseObject + "ApiEndpoints";
    string DomainEntityPlural = PluralizeNoun(DomainEntity);
    string entity = ConvertFirstLetterToLowercase(DomainEntity);

    var pkParameters = "";
    var pkExpression = "";
    var pkProperties = "";
    var pkValuesForCreate = "";
    var pkValuesForUpdate = "";
    for (int i = 0; i < table.PrimaryKey.Length; i++)
    {
        if (i > 0)
        {
            pkParameters += ", ";
            pkExpression += " && ";
            pkProperties += ", ";
        }
        var column = table.PrimaryKey[i];
        var typeName = TypeNameOrAlias(column.DataType);
        pkParameters += typeName + " " + ConvertFirstLetterToLowercase(column.ColumnName);
        pkExpression += "x." + column.ColumnName + " == " + ConvertFirstLetterToLowercase(column.ColumnName);
        pkProperties += ConvertFirstLetterToLowercase(column.ColumnName);
        pkValuesForCreate += column.ColumnName + " {entity." + column.ColumnName + "}";
        pkValuesForUpdate += column.ColumnName + " {" + ConvertFirstLetterToLowercase(column.ColumnName) + "}";
    }

    var apiGroup = DomainToolkit;
    if (DomainToolset != "-")
        apiGroup += ": " + DomainToolset;

    var apiSpace = DomainToolkit + "Api";
    if (DomainToolset != "-")
        apiSpace += "." + DomainToolset;
    if (DomainEntity != "-")
        apiSpace += "." + DomainEntity;
#>
using <#= Platform #>.Contract.<#= DomainToolkit #>;

using <#= Platform #>.Sdk.<#= DomainToolkit #>;

<# if (DomainEntity == "Module") { #>
using ModuleHandle = Shift.Contract.Curriculums.ModuleHandle;

<# } #>
namespace <#= Platform #>.Tests.Manual.<#= DomainToolkit #>
{
    [Trait("Category", "SDK")]
    public class <#= DomainEntity #>ClientTests : IClassFixture<ApiClientFixture>
    {
        ApiClientFixture _fixture;

        public <#= DomainEntity #>ClientTests(ApiClientFixture fixture)
        {
            _fixture = fixture;
        }

        [Fact]
        public async Task Search()
        {
            var client = new <#= DomainEntity #>Client(_fixture.ApiClientFactory);
            var criteria = new <#= DomainEntity #>Criteria() { Take = 3 };
            var handles = await client.SearchAsync(criteria);
        }
    }
}