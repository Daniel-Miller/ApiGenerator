
using Microsoft.EntityFrameworkCore;

using Bridge.Service.Activity;
using Bridge.Service.Contact;
using Bridge.Service.Database;
using Bridge.Service.Inventory;
using Bridge.Service.Setting;

namespace Bridge.Service;

public class TableDbContext : DbContext
{
    public TableDbContext(DbContextOptions options) : base(options) { }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        ApplyConfigurations(builder);
        ApplyNavigations(builder);

        var decimalProperties = builder.Model
            .GetEntityTypes()
            .SelectMany(t => t.GetProperties())
            .Where(p => (Nullable.GetUnderlyingType(p.ClrType) ?? p.ClrType) == typeof(decimal));

        foreach (var property in decimalProperties)
        {
            property.SetPrecision(18);
            property.SetScale(2);
        }
    }

    private void ApplyNavigations(ModelBuilder builder)
    {
        // builder.Entity<UserEntity>().HasMany(e => e.Persons).WithOne(e => e.User).HasForeignKey(e => e.UserIdentifier).HasPrincipalKey(e => e.UserIdentifier);
    }

    private void ApplyConfigurations(ModelBuilder builder)
    {
        builder.ApplyConfiguration(new AddressConfiguration());
        builder.ApplyConfiguration(new AuthenticationConfiguration());
        builder.ApplyConfiguration(new CityConfiguration());
        builder.ApplyConfiguration(new ConditionConfiguration());
        builder.ApplyConfiguration(new ContactConfiguration());
        builder.ApplyConfiguration(new CountryConfiguration());
        builder.ApplyConfiguration(new DateConfiguration());
        builder.ApplyConfiguration(new EditorConfiguration());
        builder.ApplyConfiguration(new FinderConfiguration());
        builder.ApplyConfiguration(new LocationConfiguration());
        builder.ApplyConfiguration(new LookupConfiguration());
        builder.ApplyConfiguration(new MembershipConfiguration());
        builder.ApplyConfiguration(new OrderConfiguration());
        builder.ApplyConfiguration(new OrderItemConfiguration());
        builder.ApplyConfiguration(new ProductConfiguration());
        builder.ApplyConfiguration(new ProvinceConfiguration());
        builder.ApplyConfiguration(new RentalConfiguration());
        builder.ApplyConfiguration(new SaleConfiguration());
        builder.ApplyConfiguration(new ShipmentConfiguration());
        builder.ApplyConfiguration(new UpgradeConfiguration());
        builder.ApplyConfiguration(new UserRoleConfiguration());
    }

    #region Database Tables

        internal DbSet<AddressEntity> Addresses { get; set; }
        internal DbSet<AuthenticationEntity> Authentications { get; set; }
        internal DbSet<CityEntity> Cities { get; set; }
        internal DbSet<ConditionEntity> Conditions { get; set; }
        internal DbSet<ContactEntity> Contacts { get; set; }
        internal DbSet<CountryEntity> Countries { get; set; }
        internal DbSet<DateEntity> Dates { get; set; }
        internal DbSet<EditorEntity> Editors { get; set; }
        internal DbSet<FinderEntity> Finders { get; set; }
        internal DbSet<LocationEntity> Locations { get; set; }
        internal DbSet<LookupEntity> Lookups { get; set; }
        internal DbSet<MembershipEntity> Memberships { get; set; }
        internal DbSet<OrderEntity> Orders { get; set; }
        internal DbSet<OrderItemEntity> OrderItems { get; set; }
        internal DbSet<ProductEntity> Products { get; set; }
        internal DbSet<ProvinceEntity> Provinces { get; set; }
        internal DbSet<RentalEntity> Rentals { get; set; }
        internal DbSet<SaleEntity> Sales { get; set; }
        internal DbSet<ShipmentEntity> Shipments { get; set; }
        internal DbSet<UpgradeEntity> Upgrades { get; set; }
        internal DbSet<UserRoleEntity> UserRoles { get; set; }

    #endregion
}