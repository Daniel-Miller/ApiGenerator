<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="Platform" #>
<#@ parameter type="System.String" name="DatabaseSchema" #>
<#@ parameter type="System.String" name="DatabaseTable" #>
<#@ parameter type="System.String" name="DatabasePrimaryKey" #>
<#@ parameter type="System.String" name="DomainToolkit" #>
<#@ parameter type="System.String" name="DomainEntity" #>
<#@ include file="$(ProjectDir)\Include.ttinclude" once="true" #><#
    
    var table = GetTable(DatabaseSchema, DatabaseTable);
    var primaryKey = DatabasePrimaryKey.Split(new []{','});

    var pkParameters = "";
    var pkExpression = "";
    var pkProperties = "";
    var pkValues = "";
    for (int i = 0; i < primaryKey.Length; i++)
    {
        if (i > 0)
        {
            pkParameters += ", ";
            pkExpression += " && ";
            pkProperties += ", ";
            pkValues += ", ";
        }
        var column = table.Columns[primaryKey[i]];
        var typeName = TypeNameOrAlias(column.DataType);
        pkParameters += typeName + " " + ConvertFirstLetterToLowercase(column.ColumnName);
        pkExpression += "x." + column.ColumnName + " == " + ConvertFirstLetterToLowercase(column.ColumnName);
        pkProperties += "entity." + column.ColumnName;
        pkValues += ConvertFirstLetterToLowercase(column.ColumnName);
    }

#>
using FluentValidation;

using <#= Platform #>.Contract.<#= DomainToolkit #>;

namespace <#= Platform #>.Service.<#= DomainToolkit #>.Data;

public interface I<#= DomainEntity #>Service
{
    Task<<#= DomainEntity #>Model?> GetAsync(<#= pkParameters #>, CancellationToken token);
    Task<IEnumerable<<#= DomainEntity #>Model>> ListAsync(<#= DomainEntity #>Criteria criteria, CancellationToken token);
    Task<IEnumerable<<#= DomainEntity #>Handle>> SearchAsync(<#= DomainEntity #>Criteria criteria, CancellationToken token);

    Task<int> CountAsync(<#= DomainEntity #>Criteria criteria, CancellationToken token);
}

public class <#= DomainEntity #>Service : I<#= DomainEntity #>Service
{
    private readonly <#= DomainEntity #>Search _search;

    private readonly <#= DomainEntity #>Adapter _adapter = new <#= DomainEntity #>Adapter();

    private readonly IValidator<<#= DomainEntity #>Criteria> _criteriaValidator;

    public <#= DomainEntity #>Service(<#= DomainEntity #>Search search, IValidator<<#= DomainEntity #>Criteria> criteriaValidator)
    {
        _search = search;

        _criteriaValidator = criteriaValidator;
    }

    public async Task<<#= DomainEntity #>Model?> GetAsync(<#= pkParameters #>, CancellationToken token)
    {
        var entity = await _search.GetAsync(<#= pkValues #>, token);

        return entity != null ? _adapter.ToModel(entity) : null;
    }

    public async Task<IEnumerable<<#= DomainEntity #>Model>> ListAsync(<#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        await _criteriaValidator.ValidateAndThrowAsync(criteria, token);

        var entities = await _search.ListAsync(criteria, token);

        return _adapter.ToModel(entities);
    }

    public async Task<IEnumerable<<#= DomainEntity #>Handle>> SearchAsync(<#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        await _criteriaValidator.ValidateAndThrowAsync(criteria, token);

        var entities = await _search.ListAsync(criteria, token);

        return _adapter.ToHandle(entities);
    }

    public async Task<int> CountAsync(<#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        return await _search.CountAsync(criteria, token);
    }
}