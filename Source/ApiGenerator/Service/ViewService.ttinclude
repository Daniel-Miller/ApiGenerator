<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="DomainToolkit" #>
<#@ parameter type="System.String" name="DomainFeature" #>
<#@ parameter type="System.String" name="DomainEntity" #>
<#@ assembly name="$(SolutionDir)\..\Build\ApiGenerator.Utility.dll" #>
<#@ import namespace="ApiGenerator.Utility" #><#
    
    var platform = Settings.PlatformName;
    var database = new Database();
    var endpoints = database.GetEndpoints();
    var endpoint = endpoints.GetEndpoint(DomainToolkit, DomainFeature, DomainEntity);
    var entities = Inflector.PluralizeNoun(endpoint.DomainEntity);

    var generator = new Generator(endpoint, "Service");
    var parameters = generator.PrimaryKeyMethodParameters();
    var arguments = generator.PrimaryKeyMethodArguments();
    var expression = generator.PrimaryKeyEqualityExpression();

#>
using FluentValidation;

<#= generator.UsingStatements("Contract") #>

namespace <#= generator.Namespace() #>;

public interface I<#= DomainEntity #>Service
{
    Task<<#= DomainEntity #>Model?> GetAsync(<#= parameters #>, CancellationToken token);
    Task<IEnumerable<<#= DomainEntity #>Model>> ListAsync(<#= DomainEntity #>Criteria criteria, CancellationToken token);

    Task<IEnumerable<<#= DomainEntity #>Handle>> SearchAsync(<#= DomainEntity #>Criteria criteria, CancellationToken token);
    Task<bool> ExistsAsync(<#= parameters #>, CancellationToken token);
    Task<int> CountAsync(<#= DomainEntity #>Criteria criteria, CancellationToken token);
}

public class <#= DomainEntity #>Service : I<#= DomainEntity #>Service
{
    private readonly <#= DomainEntity #>Search _search;

    private readonly <#= DomainEntity #>Adapter _adapter = new <#= DomainEntity #>Adapter();

    private readonly IValidator<<#= DomainEntity #>Criteria> _criteriaValidator;

    public <#= DomainEntity #>Service(<#= DomainEntity #>Search search, IValidator<<#= DomainEntity #>Criteria> criteriaValidator)
    {
        _search = search;

        _criteriaValidator = criteriaValidator;
    }

    public async Task<<#= DomainEntity #>Model?> GetAsync(<#= parameters #>, CancellationToken token)
    {
        var entity = await _search.GetAsync(<#= arguments #>, token);

        return entity != null ? _adapter.ToModel(entity) : null;
    }

    public async Task<IEnumerable<<#= DomainEntity #>Model>> ListAsync(<#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        await _criteriaValidator.ValidateAndThrowAsync(criteria, token);

        var entities = await _search.ListAsync(criteria, token);

        return _adapter.ToModel(entities);
    }

    public async Task<int> CountAsync(<#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        return await _search.CountAsync(criteria, token);
    }

    public async Task<bool> ExistsAsync(<#= parameters #>, CancellationToken token)
    {
        return await _search.ExistsAsync(<#= arguments #>, token);
    }

    public async Task<IEnumerable<<#= DomainEntity #>Handle>> SearchAsync(<#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        await _criteriaValidator.ValidateAndThrowAsync(criteria, token);

        var entities = await _search.ListAsync(criteria, token);

        return _adapter.ToHandle(entities);
    }
}