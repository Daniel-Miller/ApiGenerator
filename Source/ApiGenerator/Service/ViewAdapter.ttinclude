<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="DomainToolkit" #>
<#@ parameter type="System.String" name="DomainFeature" #>
<#@ parameter type="System.String" name="DomainEntity" #>
<#@ assembly name="$(SolutionDir)\..\Build\ApiGenerator.Utility.dll" #>
<#@ import namespace="ApiGenerator.Utility" #><#
    
    var platform = Settings.PlatformName;
    var database = new Database();
    var endpoints = database.GetEndpoints();
    var endpoint = endpoints.GetEndpoint(DomainToolkit, DomainFeature, DomainEntity);

    var generator = new Generator(endpoint, "Service");
    var declarations = generator.PropertyDeclarations(PropertyType.All, false, true, 1);
    var primaryKey = generator.PrimaryKey();

    var columns = database.GetTable(endpoint.DatabaseSchema, endpoint.DatabaseObject).Columns;

#>
<#= generator.UsingStatements("Contract") #>

namespace <#= generator.Namespace() #>;

public class <#= DomainEntity #>Adapter
{
    public IEnumerable<<#= DomainEntity #>Model> ToModel(IEnumerable<<#= DomainEntity #>Entity> entities)
    {
        return entities.Select(ToModel);
    }

    public <#= DomainEntity #>Model ToModel(<#= DomainEntity #>Entity entity)
    {
        var model = new <#= DomainEntity #>Model
        {
<#
for (int i = 0; i < columns.Count; i++) 
{  
    var column = columns[i];
    Write("            " + column.ColumnName + " = entity." + column.ColumnName);
    if (i < columns.Count - 1)
        WriteLine(",");
}
#>            
        };

        return model;
    }

    public IEnumerable<<#= DomainEntity #>Handle> ToHandle(IEnumerable<<#= DomainEntity #>Entity> entities)
    {
        return entities.Select(ToHandle);
    }

    public <#= DomainEntity #>Handle ToHandle(<#= DomainEntity #>Entity entity)
    {
        var handle = new <#= DomainEntity #>Handle
        {
<#
for (int i = 0; i < primaryKey.Length; i++) 
{        
    Write("            " + primaryKey[i] + " = entity." + primaryKey[i]);
    if (i < primaryKey.Length - 1)
        Write(",");
    WriteLine("");
}
#>
        };

        return handle;
    }
}