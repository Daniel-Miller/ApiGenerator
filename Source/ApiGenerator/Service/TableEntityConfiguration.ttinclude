<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="DomainToolkit" #>
<#@ parameter type="System.String" name="DomainFeature" #>
<#@ parameter type="System.String" name="DomainEntity" #>
<#@ assembly name="$(SolutionDir)\..\Build\ApiGenerator.Utility.dll" #>
<#@ import namespace="ApiGenerator.Utility" #><#
    
    var platform = Settings.PlatformName;
    var database = new Database();
    var endpoints = database.GetEndpoints();
    var endpoint = endpoints.GetEndpoint(DomainToolkit, DomainFeature, DomainEntity);

    var generator = new Generator(endpoint, "Service");
    var declarations = generator.PropertyDeclarations(PropertyType.All, false, true, 1);

    var pkColumnNames = "x." + String.Join(", x.", endpoint.PrimaryKey.Split(new []{','}));

    var columns = database.GetTable(endpoint.DatabaseSchema, endpoint.DatabaseObject).Columns;
#>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace <#= generator.Namespace() #>;

internal class <#= DomainEntity #>Configuration : IEntityTypeConfiguration<<#= DomainEntity #>Entity>
{
    public void Configure(EntityTypeBuilder<<#= DomainEntity #>Entity> builder) 
    {
        builder.ToTable("<#= endpoint.DatabaseObject #>", "<#= endpoint.DatabaseSchema #>");
        builder.HasKey(x => new { <#= pkColumnNames #> });
            
<# 

for (int i = 0; i < columns.Count; i++) 
{ 
    var column = columns[i];
    
    Write("        builder.Property(x => x." + column.ColumnName + ")");
    
    if (!column.AllowDBNull)
    {
        Write(".IsRequired()");
    }
    
    if (column.DataType == typeof(string))
    {
        if (database.GetNativeType(endpoint.DatabaseObject, column.ColumnName) == "nvarchar")
        {
            Write(".IsUnicode(true)");
        }
        else
        {
            Write(".IsUnicode(false)");
        }
        
        if (column.MaxLength > -1)
        {
            Write(".HasMaxLength(" + column.MaxLength + ")");
        }
    }
    else if (column.DataType == typeof(decimal))
    {
        var precision = database.GetColumnPrecision(endpoint.DatabaseObject, column.ColumnName);
        var scale = database.GetColumnScale(endpoint.DatabaseObject, column.ColumnName);
        if (precision != null && scale != null)
        {
            Write($".HasPrecision({precision}, {scale})");
        }
    }
        
    WriteLine(";");
}
#>
    }
}