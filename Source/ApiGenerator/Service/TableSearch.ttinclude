<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="DomainToolkit" #>
<#@ parameter type="System.String" name="DomainFeature" #>
<#@ parameter type="System.String" name="DomainEntity" #>
<#@ assembly name="$(SolutionDir)\..\Build\ApiGenerator.Utility.dll" #>
<#@ import namespace="ApiGenerator.Utility" #><#
    
    var platform = Settings.PlatformName;
    var database = new Database();
    var endpoints = database.GetEndpoints();
    var endpoint = endpoints.GetEndpoint(DomainToolkit, DomainFeature, DomainEntity);
    var entities = Inflector.PluralizeNoun(endpoint.DomainEntity);

    var generator = new Generator(endpoint, "Service");
    var parameters = generator.PrimaryKeyMethodParameters();
    var expression = generator.PrimaryKeyEqualityExpression();
    var query = generator.BuildQuery();

#>
using Microsoft.EntityFrameworkCore;

using <#= generator.Namespace("Contract") #>;

namespace <#= generator.Namespace() #>;

public class <#= DomainEntity #>Search
{
    private readonly <#= endpoint.Component #>DbContext _tables;

    public <#= DomainEntity #>Search(<#= endpoint.Component #>DbContext tables)
    {
        _tables = tables;
    }

    public async Task<int> CountAsync(<#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        return await BuildQuery(criteria)
            .CountAsync(token);
    }

    public async Task<bool> ExistsAsync(<#= parameters #>, CancellationToken token)
    {
        return await _tables.<#= entities #>
            .AnyAsync(x => <#= expression #>, token);
    }

    public async Task<<#= DomainEntity #>Entity?> GetAsync(<#= parameters #>, CancellationToken token)
    {
        return await _tables.<#= entities #>
            .AsNoTracking()
            .FirstOrDefaultAsync(x => <#= expression #>, token);
    }

    public async Task<IEnumerable<<#= DomainEntity #>Entity>> ListAsync(<#= DomainEntity #>Criteria criteria, CancellationToken token)
    {
        return await BuildQuery(criteria)
            .Skip((criteria.Page - 1) * criteria.Take)
            .Take(criteria.Take)
            .ToListAsync(token);
    }

    private IQueryable<<#= DomainEntity #>Entity> BuildQuery(<#= DomainEntity #>Criteria criteria)
    {
        var query = _tables.<#= entities #>.AsNoTracking().AsQueryable();
<#= query #>
        return query;
    }
}